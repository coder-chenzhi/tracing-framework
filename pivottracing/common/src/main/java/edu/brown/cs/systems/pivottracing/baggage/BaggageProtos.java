// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/Baggage.proto

package edu.brown.cs.systems.pivottracing.baggage;

public final class BaggageProtos {
  private BaggageProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SimpleTupleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated string value = 1;
    /**
     * <code>repeated string value = 1;</code>
     */
    java.util.List<java.lang.String>
    getValueList();
    /**
     * <code>repeated string value = 1;</code>
     */
    int getValueCount();
    /**
     * <code>repeated string value = 1;</code>
     */
    java.lang.String getValue(int index);
    /**
     * <code>repeated string value = 1;</code>
     */
    com.google.protobuf.ByteString
        getValueBytes(int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.SimpleTuple}
   *
   * <pre>
   * A tuple with no aggregations or filters 
   * </pre>
   */
  public static final class SimpleTuple extends
      com.google.protobuf.GeneratedMessage
      implements SimpleTupleOrBuilder {
    // Use SimpleTuple.newBuilder() to construct.
    private SimpleTuple(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SimpleTuple(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SimpleTuple defaultInstance;
    public static SimpleTuple getDefaultInstance() {
      return defaultInstance;
    }

    public SimpleTuple getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SimpleTuple(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                value_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              value_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          value_ = new com.google.protobuf.UnmodifiableLazyStringList(value_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_SimpleTuple_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_SimpleTuple_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder.class);
    }

    public static com.google.protobuf.Parser<SimpleTuple> PARSER =
        new com.google.protobuf.AbstractParser<SimpleTuple>() {
      public SimpleTuple parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SimpleTuple(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SimpleTuple> getParserForType() {
      return PARSER;
    }

    // repeated string value = 1;
    public static final int VALUE_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList value_;
    /**
     * <code>repeated string value = 1;</code>
     */
    public java.util.List<java.lang.String>
        getValueList() {
      return value_;
    }
    /**
     * <code>repeated string value = 1;</code>
     */
    public int getValueCount() {
      return value_.size();
    }
    /**
     * <code>repeated string value = 1;</code>
     */
    public java.lang.String getValue(int index) {
      return value_.get(index);
    }
    /**
     * <code>repeated string value = 1;</code>
     */
    public com.google.protobuf.ByteString
        getValueBytes(int index) {
      return value_.getByteString(index);
    }

    private void initFields() {
      value_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < value_.size(); i++) {
        output.writeBytes(1, value_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(value_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getValueList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.SimpleTuple}
     *
     * <pre>
     * A tuple with no aggregations or filters 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_SimpleTuple_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_SimpleTuple_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        value_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_SimpleTuple_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple build() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple buildPartial() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple result = new edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          value_ = new com.google.protobuf.UnmodifiableLazyStringList(
              value_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.value_ = value_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple other) {
        if (other == edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.getDefaultInstance()) return this;
        if (!other.value_.isEmpty()) {
          if (value_.isEmpty()) {
            value_ = other.value_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureValueIsMutable();
            value_.addAll(other.value_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated string value = 1;
      private com.google.protobuf.LazyStringList value_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureValueIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          value_ = new com.google.protobuf.LazyStringArrayList(value_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public java.util.List<java.lang.String>
          getValueList() {
        return java.util.Collections.unmodifiableList(value_);
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public int getValueCount() {
        return value_.size();
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public java.lang.String getValue(int index) {
        return value_.get(index);
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public com.google.protobuf.ByteString
          getValueBytes(int index) {
        return value_.getByteString(index);
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public Builder setValue(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureValueIsMutable();
        value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public Builder addValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureValueIsMutable();
        value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public Builder addAllValue(
          java.lang.Iterable<java.lang.String> values) {
        ensureValueIsMutable();
        super.addAll(values, value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public Builder clearValue() {
        value_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string value = 1;</code>
       */
      public Builder addValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureValueIsMutable();
        value_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.SimpleTuple)
    }

    static {
      defaultInstance = new SimpleTuple(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.SimpleTuple)
  }

  public interface TupleBagOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .pivottracingspec.SimpleTuple tuple = 1;
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> 
        getTupleList();
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple getTuple(int index);
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    int getTupleCount();
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> 
        getTupleOrBuilderList();
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder getTupleOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.TupleBag}
   *
   * <pre>
   * A bag containing tuples, with no aggregations or filters 
   * </pre>
   */
  public static final class TupleBag extends
      com.google.protobuf.GeneratedMessage
      implements TupleBagOrBuilder {
    // Use TupleBag.newBuilder() to construct.
    private TupleBag(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TupleBag(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TupleBag defaultInstance;
    public static TupleBag getDefaultInstance() {
      return defaultInstance;
    }

    public TupleBag getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TupleBag(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                tuple_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple>();
                mutable_bitField0_ |= 0x00000001;
              }
              tuple_.add(input.readMessage(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          tuple_ = java.util.Collections.unmodifiableList(tuple_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_TupleBag_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_TupleBag_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.Builder.class);
    }

    public static com.google.protobuf.Parser<TupleBag> PARSER =
        new com.google.protobuf.AbstractParser<TupleBag>() {
      public TupleBag parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TupleBag(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TupleBag> getParserForType() {
      return PARSER;
    }

    // repeated .pivottracingspec.SimpleTuple tuple = 1;
    public static final int TUPLE_FIELD_NUMBER = 1;
    private java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> tuple_;
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> getTupleList() {
      return tuple_;
    }
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> 
        getTupleOrBuilderList() {
      return tuple_;
    }
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public int getTupleCount() {
      return tuple_.size();
    }
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple getTuple(int index) {
      return tuple_.get(index);
    }
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder getTupleOrBuilder(
        int index) {
      return tuple_.get(index);
    }

    private void initFields() {
      tuple_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < tuple_.size(); i++) {
        output.writeMessage(1, tuple_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < tuple_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, tuple_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.TupleBag}
     *
     * <pre>
     * A bag containing tuples, with no aggregations or filters 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBagOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_TupleBag_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_TupleBag_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTupleFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (tupleBuilder_ == null) {
          tuple_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          tupleBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_TupleBag_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag build() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag buildPartial() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag result = new edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag(this);
        int from_bitField0_ = bitField0_;
        if (tupleBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            tuple_ = java.util.Collections.unmodifiableList(tuple_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.tuple_ = tuple_;
        } else {
          result.tuple_ = tupleBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag other) {
        if (other == edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.getDefaultInstance()) return this;
        if (tupleBuilder_ == null) {
          if (!other.tuple_.isEmpty()) {
            if (tuple_.isEmpty()) {
              tuple_ = other.tuple_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTupleIsMutable();
              tuple_.addAll(other.tuple_);
            }
            onChanged();
          }
        } else {
          if (!other.tuple_.isEmpty()) {
            if (tupleBuilder_.isEmpty()) {
              tupleBuilder_.dispose();
              tupleBuilder_ = null;
              tuple_ = other.tuple_;
              bitField0_ = (bitField0_ & ~0x00000001);
              tupleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTupleFieldBuilder() : null;
            } else {
              tupleBuilder_.addAllMessages(other.tuple_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .pivottracingspec.SimpleTuple tuple = 1;
      private java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> tuple_ =
        java.util.Collections.emptyList();
      private void ensureTupleIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          tuple_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple>(tuple_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> tupleBuilder_;

      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> getTupleList() {
        if (tupleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tuple_);
        } else {
          return tupleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public int getTupleCount() {
        if (tupleBuilder_ == null) {
          return tuple_.size();
        } else {
          return tupleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple getTuple(int index) {
        if (tupleBuilder_ == null) {
          return tuple_.get(index);
        } else {
          return tupleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder setTuple(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple value) {
        if (tupleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTupleIsMutable();
          tuple_.set(index, value);
          onChanged();
        } else {
          tupleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder setTuple(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder builderForValue) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          tuple_.set(index, builderForValue.build());
          onChanged();
        } else {
          tupleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addTuple(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple value) {
        if (tupleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTupleIsMutable();
          tuple_.add(value);
          onChanged();
        } else {
          tupleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addTuple(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple value) {
        if (tupleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTupleIsMutable();
          tuple_.add(index, value);
          onChanged();
        } else {
          tupleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addTuple(
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder builderForValue) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          tuple_.add(builderForValue.build());
          onChanged();
        } else {
          tupleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addTuple(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder builderForValue) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          tuple_.add(index, builderForValue.build());
          onChanged();
        } else {
          tupleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addAllTuple(
          java.lang.Iterable<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> values) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          super.addAll(values, tuple_);
          onChanged();
        } else {
          tupleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder clearTuple() {
        if (tupleBuilder_ == null) {
          tuple_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          tupleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder removeTuple(int index) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          tuple_.remove(index);
          onChanged();
        } else {
          tupleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder getTupleBuilder(
          int index) {
        return getTupleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder getTupleOrBuilder(
          int index) {
        if (tupleBuilder_ == null) {
          return tuple_.get(index);  } else {
          return tupleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> 
           getTupleOrBuilderList() {
        if (tupleBuilder_ != null) {
          return tupleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tuple_);
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder addTupleBuilder() {
        return getTupleFieldBuilder().addBuilder(
            edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder addTupleBuilder(
          int index) {
        return getTupleFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder> 
           getTupleBuilderList() {
        return getTupleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> 
          getTupleFieldBuilder() {
        if (tupleBuilder_ == null) {
          tupleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder>(
                  tuple_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          tuple_ = null;
        }
        return tupleBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.TupleBag)
    }

    static {
      defaultInstance = new TupleBag(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.TupleBag)
  }

  public interface GroupOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated string groupBy = 1;
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Group by values, as strings
     * </pre>
     */
    java.util.List<java.lang.String>
    getGroupByList();
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Group by values, as strings
     * </pre>
     */
    int getGroupByCount();
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Group by values, as strings
     * </pre>
     */
    java.lang.String getGroupBy(int index);
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Group by values, as strings
     * </pre>
     */
    com.google.protobuf.ByteString
        getGroupByBytes(int index);

    // repeated sfixed64 aggregation = 2;
    /**
     * <code>repeated sfixed64 aggregation = 2;</code>
     *
     * <pre>
     * Aggregation values, as longs
     * </pre>
     */
    java.util.List<java.lang.Long> getAggregationList();
    /**
     * <code>repeated sfixed64 aggregation = 2;</code>
     *
     * <pre>
     * Aggregation values, as longs
     * </pre>
     */
    int getAggregationCount();
    /**
     * <code>repeated sfixed64 aggregation = 2;</code>
     *
     * <pre>
     * Aggregation values, as longs
     * </pre>
     */
    long getAggregation(int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.Group}
   *
   * <pre>
   * A group with some aggregations 
   * </pre>
   */
  public static final class Group extends
      com.google.protobuf.GeneratedMessage
      implements GroupOrBuilder {
    // Use Group.newBuilder() to construct.
    private Group(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Group(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Group defaultInstance;
    public static Group getDefaultInstance() {
      return defaultInstance;
    }

    public Group getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Group(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                groupBy_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              groupBy_.add(input.readBytes());
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                aggregation_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              aggregation_.add(input.readSFixed64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                aggregation_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                aggregation_.add(input.readSFixed64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          groupBy_ = new com.google.protobuf.UnmodifiableLazyStringList(groupBy_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          aggregation_ = java.util.Collections.unmodifiableList(aggregation_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Group_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Group_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder.class);
    }

    public static com.google.protobuf.Parser<Group> PARSER =
        new com.google.protobuf.AbstractParser<Group>() {
      public Group parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Group(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Group> getParserForType() {
      return PARSER;
    }

    // repeated string groupBy = 1;
    public static final int GROUPBY_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList groupBy_;
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Group by values, as strings
     * </pre>
     */
    public java.util.List<java.lang.String>
        getGroupByList() {
      return groupBy_;
    }
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Group by values, as strings
     * </pre>
     */
    public int getGroupByCount() {
      return groupBy_.size();
    }
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Group by values, as strings
     * </pre>
     */
    public java.lang.String getGroupBy(int index) {
      return groupBy_.get(index);
    }
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Group by values, as strings
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGroupByBytes(int index) {
      return groupBy_.getByteString(index);
    }

    // repeated sfixed64 aggregation = 2;
    public static final int AGGREGATION_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> aggregation_;
    /**
     * <code>repeated sfixed64 aggregation = 2;</code>
     *
     * <pre>
     * Aggregation values, as longs
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getAggregationList() {
      return aggregation_;
    }
    /**
     * <code>repeated sfixed64 aggregation = 2;</code>
     *
     * <pre>
     * Aggregation values, as longs
     * </pre>
     */
    public int getAggregationCount() {
      return aggregation_.size();
    }
    /**
     * <code>repeated sfixed64 aggregation = 2;</code>
     *
     * <pre>
     * Aggregation values, as longs
     * </pre>
     */
    public long getAggregation(int index) {
      return aggregation_.get(index);
    }

    private void initFields() {
      groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      aggregation_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < groupBy_.size(); i++) {
        output.writeBytes(1, groupBy_.getByteString(i));
      }
      for (int i = 0; i < aggregation_.size(); i++) {
        output.writeSFixed64(2, aggregation_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < groupBy_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(groupBy_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getGroupByList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getAggregationList().size();
        size += dataSize;
        size += 1 * getAggregationList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.Group}
     *
     * <pre>
     * A group with some aggregations 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Group_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Group_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        aggregation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Group_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group build() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group buildPartial() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group result = new edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          groupBy_ = new com.google.protobuf.UnmodifiableLazyStringList(
              groupBy_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.groupBy_ = groupBy_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          aggregation_ = java.util.Collections.unmodifiableList(aggregation_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.aggregation_ = aggregation_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group other) {
        if (other == edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.getDefaultInstance()) return this;
        if (!other.groupBy_.isEmpty()) {
          if (groupBy_.isEmpty()) {
            groupBy_ = other.groupBy_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureGroupByIsMutable();
            groupBy_.addAll(other.groupBy_);
          }
          onChanged();
        }
        if (!other.aggregation_.isEmpty()) {
          if (aggregation_.isEmpty()) {
            aggregation_ = other.aggregation_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAggregationIsMutable();
            aggregation_.addAll(other.aggregation_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated string groupBy = 1;
      private com.google.protobuf.LazyStringList groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureGroupByIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          groupBy_ = new com.google.protobuf.LazyStringArrayList(groupBy_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public java.util.List<java.lang.String>
          getGroupByList() {
        return java.util.Collections.unmodifiableList(groupBy_);
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public int getGroupByCount() {
        return groupBy_.size();
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public java.lang.String getGroupBy(int index) {
        return groupBy_.get(index);
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGroupByBytes(int index) {
        return groupBy_.getByteString(index);
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public Builder setGroupBy(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGroupByIsMutable();
        groupBy_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public Builder addGroupBy(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGroupByIsMutable();
        groupBy_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public Builder addAllGroupBy(
          java.lang.Iterable<java.lang.String> values) {
        ensureGroupByIsMutable();
        super.addAll(values, groupBy_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public Builder clearGroupBy() {
        groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Group by values, as strings
       * </pre>
       */
      public Builder addGroupByBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGroupByIsMutable();
        groupBy_.add(value);
        onChanged();
        return this;
      }

      // repeated sfixed64 aggregation = 2;
      private java.util.List<java.lang.Long> aggregation_ = java.util.Collections.emptyList();
      private void ensureAggregationIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          aggregation_ = new java.util.ArrayList<java.lang.Long>(aggregation_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated sfixed64 aggregation = 2;</code>
       *
       * <pre>
       * Aggregation values, as longs
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getAggregationList() {
        return java.util.Collections.unmodifiableList(aggregation_);
      }
      /**
       * <code>repeated sfixed64 aggregation = 2;</code>
       *
       * <pre>
       * Aggregation values, as longs
       * </pre>
       */
      public int getAggregationCount() {
        return aggregation_.size();
      }
      /**
       * <code>repeated sfixed64 aggregation = 2;</code>
       *
       * <pre>
       * Aggregation values, as longs
       * </pre>
       */
      public long getAggregation(int index) {
        return aggregation_.get(index);
      }
      /**
       * <code>repeated sfixed64 aggregation = 2;</code>
       *
       * <pre>
       * Aggregation values, as longs
       * </pre>
       */
      public Builder setAggregation(
          int index, long value) {
        ensureAggregationIsMutable();
        aggregation_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 aggregation = 2;</code>
       *
       * <pre>
       * Aggregation values, as longs
       * </pre>
       */
      public Builder addAggregation(long value) {
        ensureAggregationIsMutable();
        aggregation_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 aggregation = 2;</code>
       *
       * <pre>
       * Aggregation values, as longs
       * </pre>
       */
      public Builder addAllAggregation(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureAggregationIsMutable();
        super.addAll(values, aggregation_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sfixed64 aggregation = 2;</code>
       *
       * <pre>
       * Aggregation values, as longs
       * </pre>
       */
      public Builder clearAggregation() {
        aggregation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.Group)
    }

    static {
      defaultInstance = new Group(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.Group)
  }

  public interface GroupBagOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .pivottracingspec.Group group = 1;
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group> 
        getGroupList();
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group getGroup(int index);
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    int getGroupCount();
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder> 
        getGroupOrBuilderList();
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder getGroupOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.GroupBag}
   *
   * <pre>
   * A bag containing groupby tuples 
   * </pre>
   */
  public static final class GroupBag extends
      com.google.protobuf.GeneratedMessage
      implements GroupBagOrBuilder {
    // Use GroupBag.newBuilder() to construct.
    private GroupBag(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GroupBag(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GroupBag defaultInstance;
    public static GroupBag getDefaultInstance() {
      return defaultInstance;
    }

    public GroupBag getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GroupBag(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                group_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group>();
                mutable_bitField0_ |= 0x00000001;
              }
              group_.add(input.readMessage(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          group_ = java.util.Collections.unmodifiableList(group_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_GroupBag_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_GroupBag_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.Builder.class);
    }

    public static com.google.protobuf.Parser<GroupBag> PARSER =
        new com.google.protobuf.AbstractParser<GroupBag>() {
      public GroupBag parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GroupBag(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GroupBag> getParserForType() {
      return PARSER;
    }

    // repeated .pivottracingspec.Group group = 1;
    public static final int GROUP_FIELD_NUMBER = 1;
    private java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group> group_;
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group> getGroupList() {
      return group_;
    }
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    public java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder> 
        getGroupOrBuilderList() {
      return group_;
    }
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    public int getGroupCount() {
      return group_.size();
    }
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group getGroup(int index) {
      return group_.get(index);
    }
    /**
     * <code>repeated .pivottracingspec.Group group = 1;</code>
     *
     * <pre>
     * List of groups, groupBy keys should be unique
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder getGroupOrBuilder(
        int index) {
      return group_.get(index);
    }

    private void initFields() {
      group_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < group_.size(); i++) {
        output.writeMessage(1, group_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < group_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, group_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.GroupBag}
     *
     * <pre>
     * A bag containing groupby tuples 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBagOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_GroupBag_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_GroupBag_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGroupFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (groupBuilder_ == null) {
          group_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          groupBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_GroupBag_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag build() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag buildPartial() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag result = new edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag(this);
        int from_bitField0_ = bitField0_;
        if (groupBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            group_ = java.util.Collections.unmodifiableList(group_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.group_ = group_;
        } else {
          result.group_ = groupBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag other) {
        if (other == edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.getDefaultInstance()) return this;
        if (groupBuilder_ == null) {
          if (!other.group_.isEmpty()) {
            if (group_.isEmpty()) {
              group_ = other.group_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureGroupIsMutable();
              group_.addAll(other.group_);
            }
            onChanged();
          }
        } else {
          if (!other.group_.isEmpty()) {
            if (groupBuilder_.isEmpty()) {
              groupBuilder_.dispose();
              groupBuilder_ = null;
              group_ = other.group_;
              bitField0_ = (bitField0_ & ~0x00000001);
              groupBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGroupFieldBuilder() : null;
            } else {
              groupBuilder_.addAllMessages(other.group_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .pivottracingspec.Group group = 1;
      private java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group> group_ =
        java.util.Collections.emptyList();
      private void ensureGroupIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          group_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group>(group_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder> groupBuilder_;

      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group> getGroupList() {
        if (groupBuilder_ == null) {
          return java.util.Collections.unmodifiableList(group_);
        } else {
          return groupBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public int getGroupCount() {
        if (groupBuilder_ == null) {
          return group_.size();
        } else {
          return groupBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group getGroup(int index) {
        if (groupBuilder_ == null) {
          return group_.get(index);
        } else {
          return groupBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder setGroup(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group value) {
        if (groupBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGroupIsMutable();
          group_.set(index, value);
          onChanged();
        } else {
          groupBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder setGroup(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder builderForValue) {
        if (groupBuilder_ == null) {
          ensureGroupIsMutable();
          group_.set(index, builderForValue.build());
          onChanged();
        } else {
          groupBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder addGroup(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group value) {
        if (groupBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGroupIsMutable();
          group_.add(value);
          onChanged();
        } else {
          groupBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder addGroup(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group value) {
        if (groupBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGroupIsMutable();
          group_.add(index, value);
          onChanged();
        } else {
          groupBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder addGroup(
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder builderForValue) {
        if (groupBuilder_ == null) {
          ensureGroupIsMutable();
          group_.add(builderForValue.build());
          onChanged();
        } else {
          groupBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder addGroup(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder builderForValue) {
        if (groupBuilder_ == null) {
          ensureGroupIsMutable();
          group_.add(index, builderForValue.build());
          onChanged();
        } else {
          groupBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder addAllGroup(
          java.lang.Iterable<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group> values) {
        if (groupBuilder_ == null) {
          ensureGroupIsMutable();
          super.addAll(values, group_);
          onChanged();
        } else {
          groupBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder clearGroup() {
        if (groupBuilder_ == null) {
          group_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          groupBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public Builder removeGroup(int index) {
        if (groupBuilder_ == null) {
          ensureGroupIsMutable();
          group_.remove(index);
          onChanged();
        } else {
          groupBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder getGroupBuilder(
          int index) {
        return getGroupFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder getGroupOrBuilder(
          int index) {
        if (groupBuilder_ == null) {
          return group_.get(index);  } else {
          return groupBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder> 
           getGroupOrBuilderList() {
        if (groupBuilder_ != null) {
          return groupBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(group_);
        }
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder addGroupBuilder() {
        return getGroupFieldBuilder().addBuilder(
            edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder addGroupBuilder(
          int index) {
        return getGroupFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.Group group = 1;</code>
       *
       * <pre>
       * List of groups, groupBy keys should be unique
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder> 
           getGroupBuilderList() {
        return getGroupFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder> 
          getGroupFieldBuilder() {
        if (groupBuilder_ == null) {
          groupBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Group.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupOrBuilder>(
                  group_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          group_ = null;
        }
        return groupBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.GroupBag)
    }

    static {
      defaultInstance = new GroupBag(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.GroupBag)
  }

  public interface FilterBagOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .pivottracingspec.SimpleTuple tuple = 1;
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> 
        getTupleList();
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple getTuple(int index);
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    int getTupleCount();
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> 
        getTupleOrBuilderList();
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder getTupleOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.FilterBag}
   *
   * <pre>
   * A bag with a filter applied 
   * </pre>
   */
  public static final class FilterBag extends
      com.google.protobuf.GeneratedMessage
      implements FilterBagOrBuilder {
    // Use FilterBag.newBuilder() to construct.
    private FilterBag(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FilterBag(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FilterBag defaultInstance;
    public static FilterBag getDefaultInstance() {
      return defaultInstance;
    }

    public FilterBag getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FilterBag(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                tuple_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple>();
                mutable_bitField0_ |= 0x00000001;
              }
              tuple_.add(input.readMessage(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          tuple_ = java.util.Collections.unmodifiableList(tuple_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_FilterBag_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_FilterBag_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.Builder.class);
    }

    public static com.google.protobuf.Parser<FilterBag> PARSER =
        new com.google.protobuf.AbstractParser<FilterBag>() {
      public FilterBag parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FilterBag(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FilterBag> getParserForType() {
      return PARSER;
    }

    // repeated .pivottracingspec.SimpleTuple tuple = 1;
    public static final int TUPLE_FIELD_NUMBER = 1;
    private java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> tuple_;
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> getTupleList() {
      return tuple_;
    }
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> 
        getTupleOrBuilderList() {
      return tuple_;
    }
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public int getTupleCount() {
      return tuple_.size();
    }
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple getTuple(int index) {
      return tuple_.get(index);
    }
    /**
     * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
     *
     * <pre>
     * List of tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder getTupleOrBuilder(
        int index) {
      return tuple_.get(index);
    }

    private void initFields() {
      tuple_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < tuple_.size(); i++) {
        output.writeMessage(1, tuple_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < tuple_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, tuple_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.FilterBag}
     *
     * <pre>
     * A bag with a filter applied 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBagOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_FilterBag_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_FilterBag_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTupleFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (tupleBuilder_ == null) {
          tuple_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          tupleBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_FilterBag_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag build() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag buildPartial() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag result = new edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag(this);
        int from_bitField0_ = bitField0_;
        if (tupleBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            tuple_ = java.util.Collections.unmodifiableList(tuple_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.tuple_ = tuple_;
        } else {
          result.tuple_ = tupleBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag other) {
        if (other == edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.getDefaultInstance()) return this;
        if (tupleBuilder_ == null) {
          if (!other.tuple_.isEmpty()) {
            if (tuple_.isEmpty()) {
              tuple_ = other.tuple_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTupleIsMutable();
              tuple_.addAll(other.tuple_);
            }
            onChanged();
          }
        } else {
          if (!other.tuple_.isEmpty()) {
            if (tupleBuilder_.isEmpty()) {
              tupleBuilder_.dispose();
              tupleBuilder_ = null;
              tuple_ = other.tuple_;
              bitField0_ = (bitField0_ & ~0x00000001);
              tupleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTupleFieldBuilder() : null;
            } else {
              tupleBuilder_.addAllMessages(other.tuple_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .pivottracingspec.SimpleTuple tuple = 1;
      private java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> tuple_ =
        java.util.Collections.emptyList();
      private void ensureTupleIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          tuple_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple>(tuple_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> tupleBuilder_;

      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> getTupleList() {
        if (tupleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tuple_);
        } else {
          return tupleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public int getTupleCount() {
        if (tupleBuilder_ == null) {
          return tuple_.size();
        } else {
          return tupleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple getTuple(int index) {
        if (tupleBuilder_ == null) {
          return tuple_.get(index);
        } else {
          return tupleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder setTuple(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple value) {
        if (tupleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTupleIsMutable();
          tuple_.set(index, value);
          onChanged();
        } else {
          tupleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder setTuple(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder builderForValue) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          tuple_.set(index, builderForValue.build());
          onChanged();
        } else {
          tupleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addTuple(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple value) {
        if (tupleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTupleIsMutable();
          tuple_.add(value);
          onChanged();
        } else {
          tupleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addTuple(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple value) {
        if (tupleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTupleIsMutable();
          tuple_.add(index, value);
          onChanged();
        } else {
          tupleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addTuple(
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder builderForValue) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          tuple_.add(builderForValue.build());
          onChanged();
        } else {
          tupleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addTuple(
          int index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder builderForValue) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          tuple_.add(index, builderForValue.build());
          onChanged();
        } else {
          tupleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder addAllTuple(
          java.lang.Iterable<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple> values) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          super.addAll(values, tuple_);
          onChanged();
        } else {
          tupleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder clearTuple() {
        if (tupleBuilder_ == null) {
          tuple_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          tupleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public Builder removeTuple(int index) {
        if (tupleBuilder_ == null) {
          ensureTupleIsMutable();
          tuple_.remove(index);
          onChanged();
        } else {
          tupleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder getTupleBuilder(
          int index) {
        return getTupleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder getTupleOrBuilder(
          int index) {
        if (tupleBuilder_ == null) {
          return tuple_.get(index);  } else {
          return tupleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public java.util.List<? extends edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> 
           getTupleOrBuilderList() {
        if (tupleBuilder_ != null) {
          return tupleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tuple_);
        }
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder addTupleBuilder() {
        return getTupleFieldBuilder().addBuilder(
            edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder addTupleBuilder(
          int index) {
        return getTupleFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.SimpleTuple tuple = 1;</code>
       *
       * <pre>
       * List of tuples
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder> 
           getTupleBuilderList() {
        return getTupleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder> 
          getTupleFieldBuilder() {
        if (tupleBuilder_ == null) {
          tupleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTuple.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.SimpleTupleOrBuilder>(
                  tuple_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          tuple_ = null;
        }
        return tupleBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.FilterBag)
    }

    static {
      defaultInstance = new FilterBag(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.FilterBag)
  }

  public interface BagOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sfixed64 versionId = 1;
    /**
     * <code>required sfixed64 versionId = 1;</code>
     *
     * <pre>
     * A randomly generated version ID
     * </pre>
     */
    boolean hasVersionId();
    /**
     * <code>required sfixed64 versionId = 1;</code>
     *
     * <pre>
     * A randomly generated version ID
     * </pre>
     */
    long getVersionId();

    // optional .pivottracingspec.TupleBag tupleBag = 2;
    /**
     * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
     *
     * <pre>
     * A bag containing tuples with no aggregations or filters
     * </pre>
     */
    boolean hasTupleBag();
    /**
     * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
     *
     * <pre>
     * A bag containing tuples with no aggregations or filters
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag getTupleBag();
    /**
     * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
     *
     * <pre>
     * A bag containing tuples with no aggregations or filters
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBagOrBuilder getTupleBagOrBuilder();

    // optional .pivottracingspec.GroupBag groupBag = 3;
    /**
     * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
     *
     * <pre>
     * A groupby bag with 0 or more aggregations
     * </pre>
     */
    boolean hasGroupBag();
    /**
     * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
     *
     * <pre>
     * A groupby bag with 0 or more aggregations
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag getGroupBag();
    /**
     * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
     *
     * <pre>
     * A groupby bag with 0 or more aggregations
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBagOrBuilder getGroupBagOrBuilder();

    // optional .pivottracingspec.FilterBag filterBag = 4;
    /**
     * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
     *
     * <pre>
     * A tuple bag with a filter applied
     * </pre>
     */
    boolean hasFilterBag();
    /**
     * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
     *
     * <pre>
     * A tuple bag with a filter applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag getFilterBag();
    /**
     * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
     *
     * <pre>
     * A tuple bag with a filter applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBagOrBuilder getFilterBagOrBuilder();
  }
  /**
   * Protobuf type {@code pivottracingspec.Bag}
   *
   * <pre>
   * A baggage bag 
   * </pre>
   */
  public static final class Bag extends
      com.google.protobuf.GeneratedMessage
      implements BagOrBuilder {
    // Use Bag.newBuilder() to construct.
    private Bag(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Bag(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Bag defaultInstance;
    public static Bag getDefaultInstance() {
      return defaultInstance;
    }

    public Bag getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Bag(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              versionId_ = input.readSFixed64();
              break;
            }
            case 18: {
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = tupleBag_.toBuilder();
              }
              tupleBag_ = input.readMessage(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tupleBag_);
                tupleBag_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = groupBag_.toBuilder();
              }
              groupBag_ = input.readMessage(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupBag_);
                groupBag_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = filterBag_.toBuilder();
              }
              filterBag_ = input.readMessage(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filterBag_);
                filterBag_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Bag_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Bag_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag.Builder.class);
    }

    public static com.google.protobuf.Parser<Bag> PARSER =
        new com.google.protobuf.AbstractParser<Bag>() {
      public Bag parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Bag(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Bag> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sfixed64 versionId = 1;
    public static final int VERSIONID_FIELD_NUMBER = 1;
    private long versionId_;
    /**
     * <code>required sfixed64 versionId = 1;</code>
     *
     * <pre>
     * A randomly generated version ID
     * </pre>
     */
    public boolean hasVersionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sfixed64 versionId = 1;</code>
     *
     * <pre>
     * A randomly generated version ID
     * </pre>
     */
    public long getVersionId() {
      return versionId_;
    }

    // optional .pivottracingspec.TupleBag tupleBag = 2;
    public static final int TUPLEBAG_FIELD_NUMBER = 2;
    private edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag tupleBag_;
    /**
     * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
     *
     * <pre>
     * A bag containing tuples with no aggregations or filters
     * </pre>
     */
    public boolean hasTupleBag() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
     *
     * <pre>
     * A bag containing tuples with no aggregations or filters
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag getTupleBag() {
      return tupleBag_;
    }
    /**
     * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
     *
     * <pre>
     * A bag containing tuples with no aggregations or filters
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBagOrBuilder getTupleBagOrBuilder() {
      return tupleBag_;
    }

    // optional .pivottracingspec.GroupBag groupBag = 3;
    public static final int GROUPBAG_FIELD_NUMBER = 3;
    private edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag groupBag_;
    /**
     * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
     *
     * <pre>
     * A groupby bag with 0 or more aggregations
     * </pre>
     */
    public boolean hasGroupBag() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
     *
     * <pre>
     * A groupby bag with 0 or more aggregations
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag getGroupBag() {
      return groupBag_;
    }
    /**
     * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
     *
     * <pre>
     * A groupby bag with 0 or more aggregations
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBagOrBuilder getGroupBagOrBuilder() {
      return groupBag_;
    }

    // optional .pivottracingspec.FilterBag filterBag = 4;
    public static final int FILTERBAG_FIELD_NUMBER = 4;
    private edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag filterBag_;
    /**
     * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
     *
     * <pre>
     * A tuple bag with a filter applied
     * </pre>
     */
    public boolean hasFilterBag() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
     *
     * <pre>
     * A tuple bag with a filter applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag getFilterBag() {
      return filterBag_;
    }
    /**
     * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
     *
     * <pre>
     * A tuple bag with a filter applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBagOrBuilder getFilterBagOrBuilder() {
      return filterBag_;
    }

    private void initFields() {
      versionId_ = 0L;
      tupleBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.getDefaultInstance();
      groupBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.getDefaultInstance();
      filterBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasVersionId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSFixed64(1, versionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, tupleBag_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, groupBag_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, filterBag_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(1, versionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, tupleBag_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, groupBag_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, filterBag_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.Bag}
     *
     * <pre>
     * A baggage bag 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.BagOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Bag_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Bag_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag.class, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTupleBagFieldBuilder();
          getGroupBagFieldBuilder();
          getFilterBagFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        versionId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (tupleBagBuilder_ == null) {
          tupleBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.getDefaultInstance();
        } else {
          tupleBagBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (groupBagBuilder_ == null) {
          groupBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.getDefaultInstance();
        } else {
          groupBagBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (filterBagBuilder_ == null) {
          filterBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.getDefaultInstance();
        } else {
          filterBagBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.internal_static_pivottracingspec_Bag_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag build() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag buildPartial() {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag result = new edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.versionId_ = versionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (tupleBagBuilder_ == null) {
          result.tupleBag_ = tupleBag_;
        } else {
          result.tupleBag_ = tupleBagBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (groupBagBuilder_ == null) {
          result.groupBag_ = groupBag_;
        } else {
          result.groupBag_ = groupBagBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (filterBagBuilder_ == null) {
          result.filterBag_ = filterBag_;
        } else {
          result.filterBag_ = filterBagBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag other) {
        if (other == edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag.getDefaultInstance()) return this;
        if (other.hasVersionId()) {
          setVersionId(other.getVersionId());
        }
        if (other.hasTupleBag()) {
          mergeTupleBag(other.getTupleBag());
        }
        if (other.hasGroupBag()) {
          mergeGroupBag(other.getGroupBag());
        }
        if (other.hasFilterBag()) {
          mergeFilterBag(other.getFilterBag());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVersionId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.Bag) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sfixed64 versionId = 1;
      private long versionId_ ;
      /**
       * <code>required sfixed64 versionId = 1;</code>
       *
       * <pre>
       * A randomly generated version ID
       * </pre>
       */
      public boolean hasVersionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sfixed64 versionId = 1;</code>
       *
       * <pre>
       * A randomly generated version ID
       * </pre>
       */
      public long getVersionId() {
        return versionId_;
      }
      /**
       * <code>required sfixed64 versionId = 1;</code>
       *
       * <pre>
       * A randomly generated version ID
       * </pre>
       */
      public Builder setVersionId(long value) {
        bitField0_ |= 0x00000001;
        versionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sfixed64 versionId = 1;</code>
       *
       * <pre>
       * A randomly generated version ID
       * </pre>
       */
      public Builder clearVersionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        versionId_ = 0L;
        onChanged();
        return this;
      }

      // optional .pivottracingspec.TupleBag tupleBag = 2;
      private edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag tupleBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBagOrBuilder> tupleBagBuilder_;
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      public boolean hasTupleBag() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag getTupleBag() {
        if (tupleBagBuilder_ == null) {
          return tupleBag_;
        } else {
          return tupleBagBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      public Builder setTupleBag(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag value) {
        if (tupleBagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tupleBag_ = value;
          onChanged();
        } else {
          tupleBagBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      public Builder setTupleBag(
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.Builder builderForValue) {
        if (tupleBagBuilder_ == null) {
          tupleBag_ = builderForValue.build();
          onChanged();
        } else {
          tupleBagBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      public Builder mergeTupleBag(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag value) {
        if (tupleBagBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              tupleBag_ != edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.getDefaultInstance()) {
            tupleBag_ =
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.newBuilder(tupleBag_).mergeFrom(value).buildPartial();
          } else {
            tupleBag_ = value;
          }
          onChanged();
        } else {
          tupleBagBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      public Builder clearTupleBag() {
        if (tupleBagBuilder_ == null) {
          tupleBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.getDefaultInstance();
          onChanged();
        } else {
          tupleBagBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.Builder getTupleBagBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTupleBagFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBagOrBuilder getTupleBagOrBuilder() {
        if (tupleBagBuilder_ != null) {
          return tupleBagBuilder_.getMessageOrBuilder();
        } else {
          return tupleBag_;
        }
      }
      /**
       * <code>optional .pivottracingspec.TupleBag tupleBag = 2;</code>
       *
       * <pre>
       * A bag containing tuples with no aggregations or filters
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBagOrBuilder> 
          getTupleBagFieldBuilder() {
        if (tupleBagBuilder_ == null) {
          tupleBagBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.TupleBagOrBuilder>(
                  tupleBag_,
                  getParentForChildren(),
                  isClean());
          tupleBag_ = null;
        }
        return tupleBagBuilder_;
      }

      // optional .pivottracingspec.GroupBag groupBag = 3;
      private edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag groupBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBagOrBuilder> groupBagBuilder_;
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      public boolean hasGroupBag() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag getGroupBag() {
        if (groupBagBuilder_ == null) {
          return groupBag_;
        } else {
          return groupBagBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      public Builder setGroupBag(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag value) {
        if (groupBagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupBag_ = value;
          onChanged();
        } else {
          groupBagBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      public Builder setGroupBag(
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.Builder builderForValue) {
        if (groupBagBuilder_ == null) {
          groupBag_ = builderForValue.build();
          onChanged();
        } else {
          groupBagBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      public Builder mergeGroupBag(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag value) {
        if (groupBagBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              groupBag_ != edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.getDefaultInstance()) {
            groupBag_ =
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.newBuilder(groupBag_).mergeFrom(value).buildPartial();
          } else {
            groupBag_ = value;
          }
          onChanged();
        } else {
          groupBagBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      public Builder clearGroupBag() {
        if (groupBagBuilder_ == null) {
          groupBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.getDefaultInstance();
          onChanged();
        } else {
          groupBagBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.Builder getGroupBagBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getGroupBagFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBagOrBuilder getGroupBagOrBuilder() {
        if (groupBagBuilder_ != null) {
          return groupBagBuilder_.getMessageOrBuilder();
        } else {
          return groupBag_;
        }
      }
      /**
       * <code>optional .pivottracingspec.GroupBag groupBag = 3;</code>
       *
       * <pre>
       * A groupby bag with 0 or more aggregations
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBagOrBuilder> 
          getGroupBagFieldBuilder() {
        if (groupBagBuilder_ == null) {
          groupBagBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.GroupBagOrBuilder>(
                  groupBag_,
                  getParentForChildren(),
                  isClean());
          groupBag_ = null;
        }
        return groupBagBuilder_;
      }

      // optional .pivottracingspec.FilterBag filterBag = 4;
      private edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag filterBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBagOrBuilder> filterBagBuilder_;
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      public boolean hasFilterBag() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag getFilterBag() {
        if (filterBagBuilder_ == null) {
          return filterBag_;
        } else {
          return filterBagBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      public Builder setFilterBag(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag value) {
        if (filterBagBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filterBag_ = value;
          onChanged();
        } else {
          filterBagBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      public Builder setFilterBag(
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.Builder builderForValue) {
        if (filterBagBuilder_ == null) {
          filterBag_ = builderForValue.build();
          onChanged();
        } else {
          filterBagBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      public Builder mergeFilterBag(edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag value) {
        if (filterBagBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              filterBag_ != edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.getDefaultInstance()) {
            filterBag_ =
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.newBuilder(filterBag_).mergeFrom(value).buildPartial();
          } else {
            filterBag_ = value;
          }
          onChanged();
        } else {
          filterBagBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      public Builder clearFilterBag() {
        if (filterBagBuilder_ == null) {
          filterBag_ = edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.getDefaultInstance();
          onChanged();
        } else {
          filterBagBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.Builder getFilterBagBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getFilterBagFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBagOrBuilder getFilterBagOrBuilder() {
        if (filterBagBuilder_ != null) {
          return filterBagBuilder_.getMessageOrBuilder();
        } else {
          return filterBag_;
        }
      }
      /**
       * <code>optional .pivottracingspec.FilterBag filterBag = 4;</code>
       *
       * <pre>
       * A tuple bag with a filter applied
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBagOrBuilder> 
          getFilterBagFieldBuilder() {
        if (filterBagBuilder_ == null) {
          filterBagBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBag.Builder, edu.brown.cs.systems.pivottracing.baggage.BaggageProtos.FilterBagOrBuilder>(
                  filterBag_,
                  getParentForChildren(),
                  isClean());
          filterBag_ = null;
        }
        return filterBagBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.Bag)
    }

    static {
      defaultInstance = new Bag(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.Bag)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_SimpleTuple_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_SimpleTuple_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_TupleBag_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_TupleBag_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_Group_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_Group_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_GroupBag_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_GroupBag_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_FilterBag_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_FilterBag_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_Bag_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_Bag_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037src/main/protobuf/Baggage.proto\022\020pivot" +
      "tracingspec\032\036src/main/protobuf/Advice.pr" +
      "oto\"\034\n\013SimpleTuple\022\r\n\005value\030\001 \003(\t\"8\n\010Tup" +
      "leBag\022,\n\005tuple\030\001 \003(\0132\035.pivottracingspec." +
      "SimpleTuple\"-\n\005Group\022\017\n\007groupBy\030\001 \003(\t\022\023\n" +
      "\013aggregation\030\002 \003(\020\"2\n\010GroupBag\022&\n\005group\030" +
      "\001 \003(\0132\027.pivottracingspec.Group\"9\n\tFilter" +
      "Bag\022,\n\005tuple\030\001 \003(\0132\035.pivottracingspec.Si" +
      "mpleTuple\"\244\001\n\003Bag\022\021\n\tversionId\030\001 \002(\020\022,\n\010" +
      "tupleBag\030\002 \001(\0132\032.pivottracingspec.TupleB",
      "ag\022,\n\010groupBag\030\003 \001(\0132\032.pivottracingspec." +
      "GroupBag\022.\n\tfilterBag\030\004 \001(\0132\033.pivottraci" +
      "ngspec.FilterBagB:\n)edu.brown.cs.systems" +
      ".pivottracing.baggageB\rBaggageProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_pivottracingspec_SimpleTuple_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_pivottracingspec_SimpleTuple_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_SimpleTuple_descriptor,
              new java.lang.String[] { "Value", });
          internal_static_pivottracingspec_TupleBag_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_pivottracingspec_TupleBag_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_TupleBag_descriptor,
              new java.lang.String[] { "Tuple", });
          internal_static_pivottracingspec_Group_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_pivottracingspec_Group_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_Group_descriptor,
              new java.lang.String[] { "GroupBy", "Aggregation", });
          internal_static_pivottracingspec_GroupBag_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_pivottracingspec_GroupBag_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_GroupBag_descriptor,
              new java.lang.String[] { "Group", });
          internal_static_pivottracingspec_FilterBag_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_pivottracingspec_FilterBag_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_FilterBag_descriptor,
              new java.lang.String[] { "Tuple", });
          internal_static_pivottracingspec_Bag_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_pivottracingspec_Bag_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_Bag_descriptor,
              new java.lang.String[] { "VersionId", "TupleBag", "GroupBag", "FilterBag", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
