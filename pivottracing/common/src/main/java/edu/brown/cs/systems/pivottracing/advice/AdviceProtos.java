// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/Advice.proto

package edu.brown.cs.systems.pivottracing.advice;

public final class AdviceProtos {
  private AdviceProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code pivottracingspec.Agg}
   *
   * <pre>
   * Supported aggregation and combining types 
   * </pre>
   */
  public enum Agg
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SUM = 2;</code>
     */
    SUM(0, 2),
    /**
     * <code>COUNT = 3;</code>
     */
    COUNT(1, 3),
    /**
     * <code>MIN = 4;</code>
     */
    MIN(2, 4),
    /**
     * <code>MAX = 5;</code>
     */
    MAX(3, 5),
    ;

    /**
     * <code>SUM = 2;</code>
     */
    public static final int SUM_VALUE = 2;
    /**
     * <code>COUNT = 3;</code>
     */
    public static final int COUNT_VALUE = 3;
    /**
     * <code>MIN = 4;</code>
     */
    public static final int MIN_VALUE = 4;
    /**
     * <code>MAX = 5;</code>
     */
    public static final int MAX_VALUE = 5;


    public final int getNumber() { return value; }

    public static Agg valueOf(int value) {
      switch (value) {
        case 2: return SUM;
        case 3: return COUNT;
        case 4: return MIN;
        case 5: return MAX;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Agg>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Agg>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Agg>() {
            public Agg findValueByNumber(int number) {
              return Agg.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.getDescriptor().getEnumTypes().get(0);
    }

    private static final Agg[] VALUES = values();

    public static Agg valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Agg(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pivottracingspec.Agg)
  }

  /**
   * Protobuf enum {@code pivottracingspec.Filter}
   *
   * <pre>
   * Supported filters for packing subsets of tuples into the baggage 
   * </pre>
   */
  public enum Filter
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FIRST = 2;</code>
     */
    FIRST(0, 2),
    /**
     * <code>MOSTRECENT = 3;</code>
     */
    MOSTRECENT(1, 3),
    ;

    /**
     * <code>FIRST = 2;</code>
     */
    public static final int FIRST_VALUE = 2;
    /**
     * <code>MOSTRECENT = 3;</code>
     */
    public static final int MOSTRECENT_VALUE = 3;


    public final int getNumber() { return value; }

    public static Filter valueOf(int value) {
      switch (value) {
        case 2: return FIRST;
        case 3: return MOSTRECENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Filter>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Filter>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Filter>() {
            public Filter findValueByNumber(int number) {
              return Filter.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.getDescriptor().getEnumTypes().get(1);
    }

    private static final Filter[] VALUES = values();

    public static Filter valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Filter(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pivottracingspec.Filter)
  }

  public interface AggVarOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string name = 1;
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Name of the variable
     * </pre>
     */
    boolean hasName();
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Name of the variable
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Name of the variable
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // required .pivottracingspec.Agg how = 2;
    /**
     * <code>required .pivottracingspec.Agg how = 2;</code>
     *
     * <pre>
     * How to aggregate
     * </pre>
     */
    boolean hasHow();
    /**
     * <code>required .pivottracingspec.Agg how = 2;</code>
     *
     * <pre>
     * How to aggregate
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg getHow();
  }
  /**
   * Protobuf type {@code pivottracingspec.AggVar}
   *
   * <pre>
   * An aggregated variable 
   * </pre>
   */
  public static final class AggVar extends
      com.google.protobuf.GeneratedMessage
      implements AggVarOrBuilder {
    // Use AggVar.newBuilder() to construct.
    private AggVar(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AggVar(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AggVar defaultInstance;
    public static AggVar getDefaultInstance() {
      return defaultInstance;
    }

    public AggVar getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AggVar(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg value = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                how_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AggVar_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AggVar_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder.class);
    }

    public static com.google.protobuf.Parser<AggVar> PARSER =
        new com.google.protobuf.AbstractParser<AggVar>() {
      public AggVar parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AggVar(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AggVar> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Name of the variable
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Name of the variable
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 1;</code>
     *
     * <pre>
     * Name of the variable
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required .pivottracingspec.Agg how = 2;
    public static final int HOW_FIELD_NUMBER = 2;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg how_;
    /**
     * <code>required .pivottracingspec.Agg how = 2;</code>
     *
     * <pre>
     * How to aggregate
     * </pre>
     */
    public boolean hasHow() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .pivottracingspec.Agg how = 2;</code>
     *
     * <pre>
     * How to aggregate
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg getHow() {
      return how_;
    }

    private void initFields() {
      name_ = "";
      how_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg.SUM;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHow()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, how_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, how_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.AggVar}
     *
     * <pre>
     * An aggregated variable 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AggVar_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AggVar_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        how_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg.SUM;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AggVar_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.how_ = how_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasHow()) {
          setHow(other.getHow());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasHow()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Name of the variable
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Name of the variable
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Name of the variable
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Name of the variable
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Name of the variable
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * Name of the variable
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // required .pivottracingspec.Agg how = 2;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg how_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg.SUM;
      /**
       * <code>required .pivottracingspec.Agg how = 2;</code>
       *
       * <pre>
       * How to aggregate
       * </pre>
       */
      public boolean hasHow() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .pivottracingspec.Agg how = 2;</code>
       *
       * <pre>
       * How to aggregate
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg getHow() {
        return how_;
      }
      /**
       * <code>required .pivottracingspec.Agg how = 2;</code>
       *
       * <pre>
       * How to aggregate
       * </pre>
       */
      public Builder setHow(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        how_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .pivottracingspec.Agg how = 2;</code>
       *
       * <pre>
       * How to aggregate
       * </pre>
       */
      public Builder clearHow() {
        bitField0_ = (bitField0_ & ~0x00000002);
        how_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Agg.SUM;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.AggVar)
    }

    static {
      defaultInstance = new AggVar(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.AggVar)
  }

  public interface TupleSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated string var = 1;
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Vars of the tuple
     * </pre>
     */
    java.util.List<java.lang.String>
    getVarList();
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Vars of the tuple
     * </pre>
     */
    int getVarCount();
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Vars of the tuple
     * </pre>
     */
    java.lang.String getVar(int index);
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Vars of the tuple
     * </pre>
     */
    com.google.protobuf.ByteString
        getVarBytes(int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.TupleSpec}
   *
   * <pre>
   * Simple tuples 
   * </pre>
   */
  public static final class TupleSpec extends
      com.google.protobuf.GeneratedMessage
      implements TupleSpecOrBuilder {
    // Use TupleSpec.newBuilder() to construct.
    private TupleSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TupleSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TupleSpec defaultInstance;
    public static TupleSpec getDefaultInstance() {
      return defaultInstance;
    }

    public TupleSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TupleSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                var_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              var_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          var_ = new com.google.protobuf.UnmodifiableLazyStringList(var_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_TupleSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_TupleSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<TupleSpec> PARSER =
        new com.google.protobuf.AbstractParser<TupleSpec>() {
      public TupleSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TupleSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TupleSpec> getParserForType() {
      return PARSER;
    }

    // repeated string var = 1;
    public static final int VAR_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList var_;
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Vars of the tuple
     * </pre>
     */
    public java.util.List<java.lang.String>
        getVarList() {
      return var_;
    }
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Vars of the tuple
     * </pre>
     */
    public int getVarCount() {
      return var_.size();
    }
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Vars of the tuple
     * </pre>
     */
    public java.lang.String getVar(int index) {
      return var_.get(index);
    }
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Vars of the tuple
     * </pre>
     */
    public com.google.protobuf.ByteString
        getVarBytes(int index) {
      return var_.getByteString(index);
    }

    private void initFields() {
      var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < var_.size(); i++) {
        output.writeBytes(1, var_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < var_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(var_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getVarList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.TupleSpec}
     *
     * <pre>
     * Simple tuples 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_TupleSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_TupleSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_TupleSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          var_ = new com.google.protobuf.UnmodifiableLazyStringList(
              var_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.var_ = var_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance()) return this;
        if (!other.var_.isEmpty()) {
          if (var_.isEmpty()) {
            var_ = other.var_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureVarIsMutable();
            var_.addAll(other.var_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated string var = 1;
      private com.google.protobuf.LazyStringList var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureVarIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          var_ = new com.google.protobuf.LazyStringArrayList(var_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public java.util.List<java.lang.String>
          getVarList() {
        return java.util.Collections.unmodifiableList(var_);
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public int getVarCount() {
        return var_.size();
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public java.lang.String getVar(int index) {
        return var_.get(index);
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public com.google.protobuf.ByteString
          getVarBytes(int index) {
        return var_.getByteString(index);
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public Builder setVar(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public Builder addVar(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public Builder addAllVar(
          java.lang.Iterable<java.lang.String> values) {
        ensureVarIsMutable();
        super.addAll(values, var_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public Builder clearVar() {
        var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Vars of the tuple
       * </pre>
       */
      public Builder addVarBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.TupleSpec)
    }

    static {
      defaultInstance = new TupleSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.TupleSpec)
  }

  public interface FilterSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .pivottracingspec.Filter filter = 1;
    /**
     * <code>required .pivottracingspec.Filter filter = 1;</code>
     *
     * <pre>
     * What filter to perform
     * </pre>
     */
    boolean hasFilter();
    /**
     * <code>required .pivottracingspec.Filter filter = 1;</code>
     *
     * <pre>
     * What filter to perform
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter getFilter();

    // repeated string var = 2;
    /**
     * <code>repeated string var = 2;</code>
     *
     * <pre>
     * Vars to filter
     * </pre>
     */
    java.util.List<java.lang.String>
    getVarList();
    /**
     * <code>repeated string var = 2;</code>
     *
     * <pre>
     * Vars to filter
     * </pre>
     */
    int getVarCount();
    /**
     * <code>repeated string var = 2;</code>
     *
     * <pre>
     * Vars to filter
     * </pre>
     */
    java.lang.String getVar(int index);
    /**
     * <code>repeated string var = 2;</code>
     *
     * <pre>
     * Vars to filter
     * </pre>
     */
    com.google.protobuf.ByteString
        getVarBytes(int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.FilterSpec}
   *
   * <pre>
   * Filter some variables 
   * </pre>
   */
  public static final class FilterSpec extends
      com.google.protobuf.GeneratedMessage
      implements FilterSpecOrBuilder {
    // Use FilterSpec.newBuilder() to construct.
    private FilterSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FilterSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FilterSpec defaultInstance;
    public static FilterSpec getDefaultInstance() {
      return defaultInstance;
    }

    public FilterSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FilterSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter value = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                filter_ = value;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                var_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              var_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          var_ = new com.google.protobuf.UnmodifiableLazyStringList(var_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_FilterSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_FilterSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<FilterSpec> PARSER =
        new com.google.protobuf.AbstractParser<FilterSpec>() {
      public FilterSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FilterSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FilterSpec> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .pivottracingspec.Filter filter = 1;
    public static final int FILTER_FIELD_NUMBER = 1;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter filter_;
    /**
     * <code>required .pivottracingspec.Filter filter = 1;</code>
     *
     * <pre>
     * What filter to perform
     * </pre>
     */
    public boolean hasFilter() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .pivottracingspec.Filter filter = 1;</code>
     *
     * <pre>
     * What filter to perform
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter getFilter() {
      return filter_;
    }

    // repeated string var = 2;
    public static final int VAR_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList var_;
    /**
     * <code>repeated string var = 2;</code>
     *
     * <pre>
     * Vars to filter
     * </pre>
     */
    public java.util.List<java.lang.String>
        getVarList() {
      return var_;
    }
    /**
     * <code>repeated string var = 2;</code>
     *
     * <pre>
     * Vars to filter
     * </pre>
     */
    public int getVarCount() {
      return var_.size();
    }
    /**
     * <code>repeated string var = 2;</code>
     *
     * <pre>
     * Vars to filter
     * </pre>
     */
    public java.lang.String getVar(int index) {
      return var_.get(index);
    }
    /**
     * <code>repeated string var = 2;</code>
     *
     * <pre>
     * Vars to filter
     * </pre>
     */
    public com.google.protobuf.ByteString
        getVarBytes(int index) {
      return var_.getByteString(index);
    }

    private void initFields() {
      filter_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter.FIRST;
      var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasFilter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, filter_.getNumber());
      }
      for (int i = 0; i < var_.size(); i++) {
        output.writeBytes(2, var_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, filter_.getNumber());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < var_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(var_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getVarList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.FilterSpec}
     *
     * <pre>
     * Filter some variables 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_FilterSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_FilterSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        filter_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter.FIRST;
        bitField0_ = (bitField0_ & ~0x00000001);
        var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_FilterSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.filter_ = filter_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          var_ = new com.google.protobuf.UnmodifiableLazyStringList(
              var_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.var_ = var_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance()) return this;
        if (other.hasFilter()) {
          setFilter(other.getFilter());
        }
        if (!other.var_.isEmpty()) {
          if (var_.isEmpty()) {
            var_ = other.var_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureVarIsMutable();
            var_.addAll(other.var_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFilter()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .pivottracingspec.Filter filter = 1;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter filter_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter.FIRST;
      /**
       * <code>required .pivottracingspec.Filter filter = 1;</code>
       *
       * <pre>
       * What filter to perform
       * </pre>
       */
      public boolean hasFilter() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .pivottracingspec.Filter filter = 1;</code>
       *
       * <pre>
       * What filter to perform
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter getFilter() {
        return filter_;
      }
      /**
       * <code>required .pivottracingspec.Filter filter = 1;</code>
       *
       * <pre>
       * What filter to perform
       * </pre>
       */
      public Builder setFilter(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        filter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .pivottracingspec.Filter filter = 1;</code>
       *
       * <pre>
       * What filter to perform
       * </pre>
       */
      public Builder clearFilter() {
        bitField0_ = (bitField0_ & ~0x00000001);
        filter_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.Filter.FIRST;
        onChanged();
        return this;
      }

      // repeated string var = 2;
      private com.google.protobuf.LazyStringList var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureVarIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          var_ = new com.google.protobuf.LazyStringArrayList(var_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public java.util.List<java.lang.String>
          getVarList() {
        return java.util.Collections.unmodifiableList(var_);
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public int getVarCount() {
        return var_.size();
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public java.lang.String getVar(int index) {
        return var_.get(index);
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public com.google.protobuf.ByteString
          getVarBytes(int index) {
        return var_.getByteString(index);
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public Builder setVar(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public Builder addVar(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public Builder addAllVar(
          java.lang.Iterable<java.lang.String> values) {
        ensureVarIsMutable();
        super.addAll(values, var_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public Builder clearVar() {
        var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 2;</code>
       *
       * <pre>
       * Vars to filter
       * </pre>
       */
      public Builder addVarBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.FilterSpec)
    }

    static {
      defaultInstance = new FilterSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.FilterSpec)
  }

  public interface GroupBySpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated string groupBy = 1;
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Vars to group by
     * </pre>
     */
    java.util.List<java.lang.String>
    getGroupByList();
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Vars to group by
     * </pre>
     */
    int getGroupByCount();
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Vars to group by
     * </pre>
     */
    java.lang.String getGroupBy(int index);
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Vars to group by
     * </pre>
     */
    com.google.protobuf.ByteString
        getGroupByBytes(int index);

    // repeated .pivottracingspec.AggVar aggregate = 2;
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar> 
        getAggregateList();
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar getAggregate(int index);
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    int getAggregateCount();
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder> 
        getAggregateOrBuilderList();
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder getAggregateOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.GroupBySpec}
   *
   * <pre>
   * A group by with 0 or more aggregations 
   * </pre>
   */
  public static final class GroupBySpec extends
      com.google.protobuf.GeneratedMessage
      implements GroupBySpecOrBuilder {
    // Use GroupBySpec.newBuilder() to construct.
    private GroupBySpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GroupBySpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GroupBySpec defaultInstance;
    public static GroupBySpec getDefaultInstance() {
      return defaultInstance;
    }

    public GroupBySpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GroupBySpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                groupBy_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              groupBy_.add(input.readBytes());
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                aggregate_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar>();
                mutable_bitField0_ |= 0x00000002;
              }
              aggregate_.add(input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          groupBy_ = new com.google.protobuf.UnmodifiableLazyStringList(groupBy_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          aggregate_ = java.util.Collections.unmodifiableList(aggregate_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_GroupBySpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_GroupBySpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder.class);
    }

    public static com.google.protobuf.Parser<GroupBySpec> PARSER =
        new com.google.protobuf.AbstractParser<GroupBySpec>() {
      public GroupBySpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GroupBySpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GroupBySpec> getParserForType() {
      return PARSER;
    }

    // repeated string groupBy = 1;
    public static final int GROUPBY_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList groupBy_;
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Vars to group by
     * </pre>
     */
    public java.util.List<java.lang.String>
        getGroupByList() {
      return groupBy_;
    }
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Vars to group by
     * </pre>
     */
    public int getGroupByCount() {
      return groupBy_.size();
    }
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Vars to group by
     * </pre>
     */
    public java.lang.String getGroupBy(int index) {
      return groupBy_.get(index);
    }
    /**
     * <code>repeated string groupBy = 1;</code>
     *
     * <pre>
     * Vars to group by
     * </pre>
     */
    public com.google.protobuf.ByteString
        getGroupByBytes(int index) {
      return groupBy_.getByteString(index);
    }

    // repeated .pivottracingspec.AggVar aggregate = 2;
    public static final int AGGREGATE_FIELD_NUMBER = 2;
    private java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar> aggregate_;
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar> getAggregateList() {
      return aggregate_;
    }
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    public java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder> 
        getAggregateOrBuilderList() {
      return aggregate_;
    }
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    public int getAggregateCount() {
      return aggregate_.size();
    }
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar getAggregate(int index) {
      return aggregate_.get(index);
    }
    /**
     * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
     *
     * <pre>
     * Aggregations to perform
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder getAggregateOrBuilder(
        int index) {
      return aggregate_.get(index);
    }

    private void initFields() {
      groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      aggregate_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getAggregateCount(); i++) {
        if (!getAggregate(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < groupBy_.size(); i++) {
        output.writeBytes(1, groupBy_.getByteString(i));
      }
      for (int i = 0; i < aggregate_.size(); i++) {
        output.writeMessage(2, aggregate_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < groupBy_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(groupBy_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getGroupByList().size();
      }
      for (int i = 0; i < aggregate_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, aggregate_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.GroupBySpec}
     *
     * <pre>
     * A group by with 0 or more aggregations 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_GroupBySpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_GroupBySpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAggregateFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (aggregateBuilder_ == null) {
          aggregate_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          aggregateBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_GroupBySpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          groupBy_ = new com.google.protobuf.UnmodifiableLazyStringList(
              groupBy_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.groupBy_ = groupBy_;
        if (aggregateBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            aggregate_ = java.util.Collections.unmodifiableList(aggregate_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.aggregate_ = aggregate_;
        } else {
          result.aggregate_ = aggregateBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance()) return this;
        if (!other.groupBy_.isEmpty()) {
          if (groupBy_.isEmpty()) {
            groupBy_ = other.groupBy_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureGroupByIsMutable();
            groupBy_.addAll(other.groupBy_);
          }
          onChanged();
        }
        if (aggregateBuilder_ == null) {
          if (!other.aggregate_.isEmpty()) {
            if (aggregate_.isEmpty()) {
              aggregate_ = other.aggregate_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAggregateIsMutable();
              aggregate_.addAll(other.aggregate_);
            }
            onChanged();
          }
        } else {
          if (!other.aggregate_.isEmpty()) {
            if (aggregateBuilder_.isEmpty()) {
              aggregateBuilder_.dispose();
              aggregateBuilder_ = null;
              aggregate_ = other.aggregate_;
              bitField0_ = (bitField0_ & ~0x00000002);
              aggregateBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAggregateFieldBuilder() : null;
            } else {
              aggregateBuilder_.addAllMessages(other.aggregate_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getAggregateCount(); i++) {
          if (!getAggregate(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated string groupBy = 1;
      private com.google.protobuf.LazyStringList groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureGroupByIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          groupBy_ = new com.google.protobuf.LazyStringArrayList(groupBy_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public java.util.List<java.lang.String>
          getGroupByList() {
        return java.util.Collections.unmodifiableList(groupBy_);
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public int getGroupByCount() {
        return groupBy_.size();
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public java.lang.String getGroupBy(int index) {
        return groupBy_.get(index);
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public com.google.protobuf.ByteString
          getGroupByBytes(int index) {
        return groupBy_.getByteString(index);
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public Builder setGroupBy(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGroupByIsMutable();
        groupBy_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public Builder addGroupBy(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGroupByIsMutable();
        groupBy_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public Builder addAllGroupBy(
          java.lang.Iterable<java.lang.String> values) {
        ensureGroupByIsMutable();
        super.addAll(values, groupBy_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public Builder clearGroupBy() {
        groupBy_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string groupBy = 1;</code>
       *
       * <pre>
       * Vars to group by
       * </pre>
       */
      public Builder addGroupByBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGroupByIsMutable();
        groupBy_.add(value);
        onChanged();
        return this;
      }

      // repeated .pivottracingspec.AggVar aggregate = 2;
      private java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar> aggregate_ =
        java.util.Collections.emptyList();
      private void ensureAggregateIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          aggregate_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar>(aggregate_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder> aggregateBuilder_;

      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar> getAggregateList() {
        if (aggregateBuilder_ == null) {
          return java.util.Collections.unmodifiableList(aggregate_);
        } else {
          return aggregateBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public int getAggregateCount() {
        if (aggregateBuilder_ == null) {
          return aggregate_.size();
        } else {
          return aggregateBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar getAggregate(int index) {
        if (aggregateBuilder_ == null) {
          return aggregate_.get(index);
        } else {
          return aggregateBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder setAggregate(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar value) {
        if (aggregateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAggregateIsMutable();
          aggregate_.set(index, value);
          onChanged();
        } else {
          aggregateBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder setAggregate(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder builderForValue) {
        if (aggregateBuilder_ == null) {
          ensureAggregateIsMutable();
          aggregate_.set(index, builderForValue.build());
          onChanged();
        } else {
          aggregateBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder addAggregate(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar value) {
        if (aggregateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAggregateIsMutable();
          aggregate_.add(value);
          onChanged();
        } else {
          aggregateBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder addAggregate(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar value) {
        if (aggregateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAggregateIsMutable();
          aggregate_.add(index, value);
          onChanged();
        } else {
          aggregateBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder addAggregate(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder builderForValue) {
        if (aggregateBuilder_ == null) {
          ensureAggregateIsMutable();
          aggregate_.add(builderForValue.build());
          onChanged();
        } else {
          aggregateBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder addAggregate(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder builderForValue) {
        if (aggregateBuilder_ == null) {
          ensureAggregateIsMutable();
          aggregate_.add(index, builderForValue.build());
          onChanged();
        } else {
          aggregateBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder addAllAggregate(
          java.lang.Iterable<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar> values) {
        if (aggregateBuilder_ == null) {
          ensureAggregateIsMutable();
          super.addAll(values, aggregate_);
          onChanged();
        } else {
          aggregateBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder clearAggregate() {
        if (aggregateBuilder_ == null) {
          aggregate_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          aggregateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public Builder removeAggregate(int index) {
        if (aggregateBuilder_ == null) {
          ensureAggregateIsMutable();
          aggregate_.remove(index);
          onChanged();
        } else {
          aggregateBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder getAggregateBuilder(
          int index) {
        return getAggregateFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder getAggregateOrBuilder(
          int index) {
        if (aggregateBuilder_ == null) {
          return aggregate_.get(index);  } else {
          return aggregateBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder> 
           getAggregateOrBuilderList() {
        if (aggregateBuilder_ != null) {
          return aggregateBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(aggregate_);
        }
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder addAggregateBuilder() {
        return getAggregateFieldBuilder().addBuilder(
            edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder addAggregateBuilder(
          int index) {
        return getAggregateFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.AggVar aggregate = 2;</code>
       *
       * <pre>
       * Aggregations to perform
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder> 
           getAggregateBuilderList() {
        return getAggregateFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder> 
          getAggregateFieldBuilder() {
        if (aggregateBuilder_ == null) {
          aggregateBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVar.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AggVarOrBuilder>(
                  aggregate_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          aggregate_ = null;
        }
        return aggregateBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.GroupBySpec)
    }

    static {
      defaultInstance = new GroupBySpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.GroupBySpec)
  }

  public interface AdviceSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .pivottracingspec.ObserveSpec observe = 2;
    /**
     * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
     *
     * <pre>
     * OBSERVE - create tuples from variables exported by this tracepoint
     * </pre>
     */
    boolean hasObserve();
    /**
     * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
     *
     * <pre>
     * OBSERVE - create tuples from variables exported by this tracepoint
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec getObserve();
    /**
     * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
     *
     * <pre>
     * OBSERVE - create tuples from variables exported by this tracepoint
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpecOrBuilder getObserveOrBuilder();

    // repeated .pivottracingspec.UnpackSpec unpack = 3;
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec> 
        getUnpackList();
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec getUnpack(int index);
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    int getUnpackCount();
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder> 
        getUnpackOrBuilderList();
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder getUnpackOrBuilder(
        int index);

    // repeated .pivottracingspec.LetSpec let = 4;
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec> 
        getLetList();
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec getLet(int index);
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    int getLetCount();
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder> 
        getLetOrBuilderList();
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder getLetOrBuilder(
        int index);

    // repeated .pivottracingspec.WhereSpec where = 5;
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec> 
        getWhereList();
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec getWhere(int index);
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    int getWhereCount();
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder> 
        getWhereOrBuilderList();
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder getWhereOrBuilder(
        int index);

    // optional .pivottracingspec.PackSpec pack = 6;
    /**
     * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
     *
     * <pre>
     * PACK - pack output tuples into the baggage
     * </pre>
     */
    boolean hasPack();
    /**
     * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
     *
     * <pre>
     * PACK - pack output tuples into the baggage
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec getPack();
    /**
     * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
     *
     * <pre>
     * PACK - pack output tuples into the baggage
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpecOrBuilder getPackOrBuilder();

    // optional .pivottracingspec.EmitSpec emit = 7;
    /**
     * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
     *
     * <pre>
     * EMIT - output tuples for global aggregation
     * </pre>
     */
    boolean hasEmit();
    /**
     * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
     *
     * <pre>
     * EMIT - output tuples for global aggregation
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec getEmit();
    /**
     * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
     *
     * <pre>
     * EMIT - output tuples for global aggregation
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpecOrBuilder getEmitOrBuilder();
  }
  /**
   * Protobuf type {@code pivottracingspec.AdviceSpec}
   *
   * <pre>
   * Configures advice to run at some tracepoint 
   * </pre>
   */
  public static final class AdviceSpec extends
      com.google.protobuf.GeneratedMessage
      implements AdviceSpecOrBuilder {
    // Use AdviceSpec.newBuilder() to construct.
    private AdviceSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AdviceSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AdviceSpec defaultInstance;
    public static AdviceSpec getDefaultInstance() {
      return defaultInstance;
    }

    public AdviceSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AdviceSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = observe_.toBuilder();
              }
              observe_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(observe_);
                observe_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                unpack_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec>();
                mutable_bitField0_ |= 0x00000002;
              }
              unpack_.add(input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                let_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec>();
                mutable_bitField0_ |= 0x00000004;
              }
              let_.add(input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                where_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec>();
                mutable_bitField0_ |= 0x00000008;
              }
              where_.add(input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = pack_.toBuilder();
              }
              pack_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pack_);
                pack_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 58: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = emit_.toBuilder();
              }
              emit_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(emit_);
                emit_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          unpack_ = java.util.Collections.unmodifiableList(unpack_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          let_ = java.util.Collections.unmodifiableList(let_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          where_ = java.util.Collections.unmodifiableList(where_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AdviceSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AdviceSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<AdviceSpec> PARSER =
        new com.google.protobuf.AbstractParser<AdviceSpec>() {
      public AdviceSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AdviceSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AdviceSpec> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .pivottracingspec.ObserveSpec observe = 2;
    public static final int OBSERVE_FIELD_NUMBER = 2;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec observe_;
    /**
     * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
     *
     * <pre>
     * OBSERVE - create tuples from variables exported by this tracepoint
     * </pre>
     */
    public boolean hasObserve() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
     *
     * <pre>
     * OBSERVE - create tuples from variables exported by this tracepoint
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec getObserve() {
      return observe_;
    }
    /**
     * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
     *
     * <pre>
     * OBSERVE - create tuples from variables exported by this tracepoint
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpecOrBuilder getObserveOrBuilder() {
      return observe_;
    }

    // repeated .pivottracingspec.UnpackSpec unpack = 3;
    public static final int UNPACK_FIELD_NUMBER = 3;
    private java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec> unpack_;
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec> getUnpackList() {
      return unpack_;
    }
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    public java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder> 
        getUnpackOrBuilderList() {
      return unpack_;
    }
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    public int getUnpackCount() {
      return unpack_.size();
    }
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec getUnpack(int index) {
      return unpack_.get(index);
    }
    /**
     * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
     *
     * <pre>
     * UNPACK - unpack baggage tuples from potentially multiple previous advices
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder getUnpackOrBuilder(
        int index) {
      return unpack_.get(index);
    }

    // repeated .pivottracingspec.LetSpec let = 4;
    public static final int LET_FIELD_NUMBER = 4;
    private java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec> let_;
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec> getLetList() {
      return let_;
    }
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    public java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder> 
        getLetOrBuilderList() {
      return let_;
    }
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    public int getLetCount() {
      return let_.size();
    }
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec getLet(int index) {
      return let_.get(index);
    }
    /**
     * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
     *
     * <pre>
     * LET - construct new variables for each tuple
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder getLetOrBuilder(
        int index) {
      return let_.get(index);
    }

    // repeated .pivottracingspec.WhereSpec where = 5;
    public static final int WHERE_FIELD_NUMBER = 5;
    private java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec> where_;
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec> getWhereList() {
      return where_;
    }
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    public java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder> 
        getWhereOrBuilderList() {
      return where_;
    }
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    public int getWhereCount() {
      return where_.size();
    }
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec getWhere(int index) {
      return where_.get(index);
    }
    /**
     * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
     *
     * <pre>
     * WHERE - filter each tuple based on a predicate
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder getWhereOrBuilder(
        int index) {
      return where_.get(index);
    }

    // optional .pivottracingspec.PackSpec pack = 6;
    public static final int PACK_FIELD_NUMBER = 6;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec pack_;
    /**
     * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
     *
     * <pre>
     * PACK - pack output tuples into the baggage
     * </pre>
     */
    public boolean hasPack() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
     *
     * <pre>
     * PACK - pack output tuples into the baggage
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec getPack() {
      return pack_;
    }
    /**
     * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
     *
     * <pre>
     * PACK - pack output tuples into the baggage
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpecOrBuilder getPackOrBuilder() {
      return pack_;
    }

    // optional .pivottracingspec.EmitSpec emit = 7;
    public static final int EMIT_FIELD_NUMBER = 7;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec emit_;
    /**
     * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
     *
     * <pre>
     * EMIT - output tuples for global aggregation
     * </pre>
     */
    public boolean hasEmit() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
     *
     * <pre>
     * EMIT - output tuples for global aggregation
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec getEmit() {
      return emit_;
    }
    /**
     * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
     *
     * <pre>
     * EMIT - output tuples for global aggregation
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpecOrBuilder getEmitOrBuilder() {
      return emit_;
    }

    private void initFields() {
      observe_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.getDefaultInstance();
      unpack_ = java.util.Collections.emptyList();
      let_ = java.util.Collections.emptyList();
      where_ = java.util.Collections.emptyList();
      pack_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.getDefaultInstance();
      emit_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasObserve()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getUnpackCount(); i++) {
        if (!getUnpack(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getLetCount(); i++) {
        if (!getLet(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getWhereCount(); i++) {
        if (!getWhere(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPack()) {
        if (!getPack().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasEmit()) {
        if (!getEmit().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, observe_);
      }
      for (int i = 0; i < unpack_.size(); i++) {
        output.writeMessage(3, unpack_.get(i));
      }
      for (int i = 0; i < let_.size(); i++) {
        output.writeMessage(4, let_.get(i));
      }
      for (int i = 0; i < where_.size(); i++) {
        output.writeMessage(5, where_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(6, pack_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(7, emit_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, observe_);
      }
      for (int i = 0; i < unpack_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, unpack_.get(i));
      }
      for (int i = 0; i < let_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, let_.get(i));
      }
      for (int i = 0; i < where_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, where_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, pack_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, emit_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.AdviceSpec}
     *
     * <pre>
     * Configures advice to run at some tracepoint 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AdviceSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AdviceSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getObserveFieldBuilder();
          getUnpackFieldBuilder();
          getLetFieldBuilder();
          getWhereFieldBuilder();
          getPackFieldBuilder();
          getEmitFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (observeBuilder_ == null) {
          observe_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.getDefaultInstance();
        } else {
          observeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (unpackBuilder_ == null) {
          unpack_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          unpackBuilder_.clear();
        }
        if (letBuilder_ == null) {
          let_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          letBuilder_.clear();
        }
        if (whereBuilder_ == null) {
          where_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          whereBuilder_.clear();
        }
        if (packBuilder_ == null) {
          pack_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.getDefaultInstance();
        } else {
          packBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (emitBuilder_ == null) {
          emit_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.getDefaultInstance();
        } else {
          emitBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_AdviceSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (observeBuilder_ == null) {
          result.observe_ = observe_;
        } else {
          result.observe_ = observeBuilder_.build();
        }
        if (unpackBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            unpack_ = java.util.Collections.unmodifiableList(unpack_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.unpack_ = unpack_;
        } else {
          result.unpack_ = unpackBuilder_.build();
        }
        if (letBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            let_ = java.util.Collections.unmodifiableList(let_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.let_ = let_;
        } else {
          result.let_ = letBuilder_.build();
        }
        if (whereBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            where_ = java.util.Collections.unmodifiableList(where_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.where_ = where_;
        } else {
          result.where_ = whereBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        if (packBuilder_ == null) {
          result.pack_ = pack_;
        } else {
          result.pack_ = packBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        if (emitBuilder_ == null) {
          result.emit_ = emit_;
        } else {
          result.emit_ = emitBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec.getDefaultInstance()) return this;
        if (other.hasObserve()) {
          mergeObserve(other.getObserve());
        }
        if (unpackBuilder_ == null) {
          if (!other.unpack_.isEmpty()) {
            if (unpack_.isEmpty()) {
              unpack_ = other.unpack_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureUnpackIsMutable();
              unpack_.addAll(other.unpack_);
            }
            onChanged();
          }
        } else {
          if (!other.unpack_.isEmpty()) {
            if (unpackBuilder_.isEmpty()) {
              unpackBuilder_.dispose();
              unpackBuilder_ = null;
              unpack_ = other.unpack_;
              bitField0_ = (bitField0_ & ~0x00000002);
              unpackBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUnpackFieldBuilder() : null;
            } else {
              unpackBuilder_.addAllMessages(other.unpack_);
            }
          }
        }
        if (letBuilder_ == null) {
          if (!other.let_.isEmpty()) {
            if (let_.isEmpty()) {
              let_ = other.let_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureLetIsMutable();
              let_.addAll(other.let_);
            }
            onChanged();
          }
        } else {
          if (!other.let_.isEmpty()) {
            if (letBuilder_.isEmpty()) {
              letBuilder_.dispose();
              letBuilder_ = null;
              let_ = other.let_;
              bitField0_ = (bitField0_ & ~0x00000004);
              letBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLetFieldBuilder() : null;
            } else {
              letBuilder_.addAllMessages(other.let_);
            }
          }
        }
        if (whereBuilder_ == null) {
          if (!other.where_.isEmpty()) {
            if (where_.isEmpty()) {
              where_ = other.where_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureWhereIsMutable();
              where_.addAll(other.where_);
            }
            onChanged();
          }
        } else {
          if (!other.where_.isEmpty()) {
            if (whereBuilder_.isEmpty()) {
              whereBuilder_.dispose();
              whereBuilder_ = null;
              where_ = other.where_;
              bitField0_ = (bitField0_ & ~0x00000008);
              whereBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getWhereFieldBuilder() : null;
            } else {
              whereBuilder_.addAllMessages(other.where_);
            }
          }
        }
        if (other.hasPack()) {
          mergePack(other.getPack());
        }
        if (other.hasEmit()) {
          mergeEmit(other.getEmit());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasObserve()) {
          
          return false;
        }
        for (int i = 0; i < getUnpackCount(); i++) {
          if (!getUnpack(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getLetCount(); i++) {
          if (!getLet(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getWhereCount(); i++) {
          if (!getWhere(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasPack()) {
          if (!getPack().isInitialized()) {
            
            return false;
          }
        }
        if (hasEmit()) {
          if (!getEmit().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.AdviceSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .pivottracingspec.ObserveSpec observe = 2;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec observe_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpecOrBuilder> observeBuilder_;
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      public boolean hasObserve() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec getObserve() {
        if (observeBuilder_ == null) {
          return observe_;
        } else {
          return observeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      public Builder setObserve(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec value) {
        if (observeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          observe_ = value;
          onChanged();
        } else {
          observeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      public Builder setObserve(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.Builder builderForValue) {
        if (observeBuilder_ == null) {
          observe_ = builderForValue.build();
          onChanged();
        } else {
          observeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      public Builder mergeObserve(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec value) {
        if (observeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              observe_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.getDefaultInstance()) {
            observe_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.newBuilder(observe_).mergeFrom(value).buildPartial();
          } else {
            observe_ = value;
          }
          onChanged();
        } else {
          observeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      public Builder clearObserve() {
        if (observeBuilder_ == null) {
          observe_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.getDefaultInstance();
          onChanged();
        } else {
          observeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.Builder getObserveBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getObserveFieldBuilder().getBuilder();
      }
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpecOrBuilder getObserveOrBuilder() {
        if (observeBuilder_ != null) {
          return observeBuilder_.getMessageOrBuilder();
        } else {
          return observe_;
        }
      }
      /**
       * <code>required .pivottracingspec.ObserveSpec observe = 2;</code>
       *
       * <pre>
       * OBSERVE - create tuples from variables exported by this tracepoint
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpecOrBuilder> 
          getObserveFieldBuilder() {
        if (observeBuilder_ == null) {
          observeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpecOrBuilder>(
                  observe_,
                  getParentForChildren(),
                  isClean());
          observe_ = null;
        }
        return observeBuilder_;
      }

      // repeated .pivottracingspec.UnpackSpec unpack = 3;
      private java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec> unpack_ =
        java.util.Collections.emptyList();
      private void ensureUnpackIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          unpack_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec>(unpack_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder> unpackBuilder_;

      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec> getUnpackList() {
        if (unpackBuilder_ == null) {
          return java.util.Collections.unmodifiableList(unpack_);
        } else {
          return unpackBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public int getUnpackCount() {
        if (unpackBuilder_ == null) {
          return unpack_.size();
        } else {
          return unpackBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec getUnpack(int index) {
        if (unpackBuilder_ == null) {
          return unpack_.get(index);
        } else {
          return unpackBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder setUnpack(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec value) {
        if (unpackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnpackIsMutable();
          unpack_.set(index, value);
          onChanged();
        } else {
          unpackBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder setUnpack(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder builderForValue) {
        if (unpackBuilder_ == null) {
          ensureUnpackIsMutable();
          unpack_.set(index, builderForValue.build());
          onChanged();
        } else {
          unpackBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder addUnpack(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec value) {
        if (unpackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnpackIsMutable();
          unpack_.add(value);
          onChanged();
        } else {
          unpackBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder addUnpack(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec value) {
        if (unpackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnpackIsMutable();
          unpack_.add(index, value);
          onChanged();
        } else {
          unpackBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder addUnpack(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder builderForValue) {
        if (unpackBuilder_ == null) {
          ensureUnpackIsMutable();
          unpack_.add(builderForValue.build());
          onChanged();
        } else {
          unpackBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder addUnpack(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder builderForValue) {
        if (unpackBuilder_ == null) {
          ensureUnpackIsMutable();
          unpack_.add(index, builderForValue.build());
          onChanged();
        } else {
          unpackBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder addAllUnpack(
          java.lang.Iterable<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec> values) {
        if (unpackBuilder_ == null) {
          ensureUnpackIsMutable();
          super.addAll(values, unpack_);
          onChanged();
        } else {
          unpackBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder clearUnpack() {
        if (unpackBuilder_ == null) {
          unpack_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          unpackBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public Builder removeUnpack(int index) {
        if (unpackBuilder_ == null) {
          ensureUnpackIsMutable();
          unpack_.remove(index);
          onChanged();
        } else {
          unpackBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder getUnpackBuilder(
          int index) {
        return getUnpackFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder getUnpackOrBuilder(
          int index) {
        if (unpackBuilder_ == null) {
          return unpack_.get(index);  } else {
          return unpackBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder> 
           getUnpackOrBuilderList() {
        if (unpackBuilder_ != null) {
          return unpackBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(unpack_);
        }
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder addUnpackBuilder() {
        return getUnpackFieldBuilder().addBuilder(
            edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder addUnpackBuilder(
          int index) {
        return getUnpackFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.UnpackSpec unpack = 3;</code>
       *
       * <pre>
       * UNPACK - unpack baggage tuples from potentially multiple previous advices
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder> 
           getUnpackBuilderList() {
        return getUnpackFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder> 
          getUnpackFieldBuilder() {
        if (unpackBuilder_ == null) {
          unpackBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder>(
                  unpack_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          unpack_ = null;
        }
        return unpackBuilder_;
      }

      // repeated .pivottracingspec.LetSpec let = 4;
      private java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec> let_ =
        java.util.Collections.emptyList();
      private void ensureLetIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          let_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec>(let_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder> letBuilder_;

      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec> getLetList() {
        if (letBuilder_ == null) {
          return java.util.Collections.unmodifiableList(let_);
        } else {
          return letBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public int getLetCount() {
        if (letBuilder_ == null) {
          return let_.size();
        } else {
          return letBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec getLet(int index) {
        if (letBuilder_ == null) {
          return let_.get(index);
        } else {
          return letBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder setLet(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec value) {
        if (letBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLetIsMutable();
          let_.set(index, value);
          onChanged();
        } else {
          letBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder setLet(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder builderForValue) {
        if (letBuilder_ == null) {
          ensureLetIsMutable();
          let_.set(index, builderForValue.build());
          onChanged();
        } else {
          letBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder addLet(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec value) {
        if (letBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLetIsMutable();
          let_.add(value);
          onChanged();
        } else {
          letBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder addLet(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec value) {
        if (letBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLetIsMutable();
          let_.add(index, value);
          onChanged();
        } else {
          letBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder addLet(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder builderForValue) {
        if (letBuilder_ == null) {
          ensureLetIsMutable();
          let_.add(builderForValue.build());
          onChanged();
        } else {
          letBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder addLet(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder builderForValue) {
        if (letBuilder_ == null) {
          ensureLetIsMutable();
          let_.add(index, builderForValue.build());
          onChanged();
        } else {
          letBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder addAllLet(
          java.lang.Iterable<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec> values) {
        if (letBuilder_ == null) {
          ensureLetIsMutable();
          super.addAll(values, let_);
          onChanged();
        } else {
          letBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder clearLet() {
        if (letBuilder_ == null) {
          let_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          letBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public Builder removeLet(int index) {
        if (letBuilder_ == null) {
          ensureLetIsMutable();
          let_.remove(index);
          onChanged();
        } else {
          letBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder getLetBuilder(
          int index) {
        return getLetFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder getLetOrBuilder(
          int index) {
        if (letBuilder_ == null) {
          return let_.get(index);  } else {
          return letBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder> 
           getLetOrBuilderList() {
        if (letBuilder_ != null) {
          return letBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(let_);
        }
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder addLetBuilder() {
        return getLetFieldBuilder().addBuilder(
            edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder addLetBuilder(
          int index) {
        return getLetFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.LetSpec let = 4;</code>
       *
       * <pre>
       * LET - construct new variables for each tuple
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder> 
           getLetBuilderList() {
        return getLetFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder> 
          getLetFieldBuilder() {
        if (letBuilder_ == null) {
          letBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder>(
                  let_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          let_ = null;
        }
        return letBuilder_;
      }

      // repeated .pivottracingspec.WhereSpec where = 5;
      private java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec> where_ =
        java.util.Collections.emptyList();
      private void ensureWhereIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          where_ = new java.util.ArrayList<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec>(where_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder> whereBuilder_;

      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec> getWhereList() {
        if (whereBuilder_ == null) {
          return java.util.Collections.unmodifiableList(where_);
        } else {
          return whereBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public int getWhereCount() {
        if (whereBuilder_ == null) {
          return where_.size();
        } else {
          return whereBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec getWhere(int index) {
        if (whereBuilder_ == null) {
          return where_.get(index);
        } else {
          return whereBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder setWhere(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec value) {
        if (whereBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWhereIsMutable();
          where_.set(index, value);
          onChanged();
        } else {
          whereBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder setWhere(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder builderForValue) {
        if (whereBuilder_ == null) {
          ensureWhereIsMutable();
          where_.set(index, builderForValue.build());
          onChanged();
        } else {
          whereBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder addWhere(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec value) {
        if (whereBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWhereIsMutable();
          where_.add(value);
          onChanged();
        } else {
          whereBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder addWhere(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec value) {
        if (whereBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWhereIsMutable();
          where_.add(index, value);
          onChanged();
        } else {
          whereBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder addWhere(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder builderForValue) {
        if (whereBuilder_ == null) {
          ensureWhereIsMutable();
          where_.add(builderForValue.build());
          onChanged();
        } else {
          whereBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder addWhere(
          int index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder builderForValue) {
        if (whereBuilder_ == null) {
          ensureWhereIsMutable();
          where_.add(index, builderForValue.build());
          onChanged();
        } else {
          whereBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder addAllWhere(
          java.lang.Iterable<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec> values) {
        if (whereBuilder_ == null) {
          ensureWhereIsMutable();
          super.addAll(values, where_);
          onChanged();
        } else {
          whereBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder clearWhere() {
        if (whereBuilder_ == null) {
          where_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          whereBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public Builder removeWhere(int index) {
        if (whereBuilder_ == null) {
          ensureWhereIsMutable();
          where_.remove(index);
          onChanged();
        } else {
          whereBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder getWhereBuilder(
          int index) {
        return getWhereFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder getWhereOrBuilder(
          int index) {
        if (whereBuilder_ == null) {
          return where_.get(index);  } else {
          return whereBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public java.util.List<? extends edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder> 
           getWhereOrBuilderList() {
        if (whereBuilder_ != null) {
          return whereBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(where_);
        }
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder addWhereBuilder() {
        return getWhereFieldBuilder().addBuilder(
            edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder addWhereBuilder(
          int index) {
        return getWhereFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.getDefaultInstance());
      }
      /**
       * <code>repeated .pivottracingspec.WhereSpec where = 5;</code>
       *
       * <pre>
       * WHERE - filter each tuple based on a predicate
       * </pre>
       */
      public java.util.List<edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder> 
           getWhereBuilderList() {
        return getWhereFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder> 
          getWhereFieldBuilder() {
        if (whereBuilder_ == null) {
          whereBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder>(
                  where_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          where_ = null;
        }
        return whereBuilder_;
      }

      // optional .pivottracingspec.PackSpec pack = 6;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec pack_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpecOrBuilder> packBuilder_;
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      public boolean hasPack() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec getPack() {
        if (packBuilder_ == null) {
          return pack_;
        } else {
          return packBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      public Builder setPack(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec value) {
        if (packBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pack_ = value;
          onChanged();
        } else {
          packBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      public Builder setPack(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.Builder builderForValue) {
        if (packBuilder_ == null) {
          pack_ = builderForValue.build();
          onChanged();
        } else {
          packBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      public Builder mergePack(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec value) {
        if (packBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              pack_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.getDefaultInstance()) {
            pack_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.newBuilder(pack_).mergeFrom(value).buildPartial();
          } else {
            pack_ = value;
          }
          onChanged();
        } else {
          packBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      public Builder clearPack() {
        if (packBuilder_ == null) {
          pack_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.getDefaultInstance();
          onChanged();
        } else {
          packBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.Builder getPackBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPackFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpecOrBuilder getPackOrBuilder() {
        if (packBuilder_ != null) {
          return packBuilder_.getMessageOrBuilder();
        } else {
          return pack_;
        }
      }
      /**
       * <code>optional .pivottracingspec.PackSpec pack = 6;</code>
       *
       * <pre>
       * PACK - pack output tuples into the baggage
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpecOrBuilder> 
          getPackFieldBuilder() {
        if (packBuilder_ == null) {
          packBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpecOrBuilder>(
                  pack_,
                  getParentForChildren(),
                  isClean());
          pack_ = null;
        }
        return packBuilder_;
      }

      // optional .pivottracingspec.EmitSpec emit = 7;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec emit_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpecOrBuilder> emitBuilder_;
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      public boolean hasEmit() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec getEmit() {
        if (emitBuilder_ == null) {
          return emit_;
        } else {
          return emitBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      public Builder setEmit(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec value) {
        if (emitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          emit_ = value;
          onChanged();
        } else {
          emitBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      public Builder setEmit(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.Builder builderForValue) {
        if (emitBuilder_ == null) {
          emit_ = builderForValue.build();
          onChanged();
        } else {
          emitBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      public Builder mergeEmit(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec value) {
        if (emitBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              emit_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.getDefaultInstance()) {
            emit_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.newBuilder(emit_).mergeFrom(value).buildPartial();
          } else {
            emit_ = value;
          }
          onChanged();
        } else {
          emitBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      public Builder clearEmit() {
        if (emitBuilder_ == null) {
          emit_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.getDefaultInstance();
          onChanged();
        } else {
          emitBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.Builder getEmitBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getEmitFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpecOrBuilder getEmitOrBuilder() {
        if (emitBuilder_ != null) {
          return emitBuilder_.getMessageOrBuilder();
        } else {
          return emit_;
        }
      }
      /**
       * <code>optional .pivottracingspec.EmitSpec emit = 7;</code>
       *
       * <pre>
       * EMIT - output tuples for global aggregation
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpecOrBuilder> 
          getEmitFieldBuilder() {
        if (emitBuilder_ == null) {
          emitBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpecOrBuilder>(
                  emit_,
                  getParentForChildren(),
                  isClean());
          emit_ = null;
        }
        return emitBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.AdviceSpec)
    }

    static {
      defaultInstance = new AdviceSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.AdviceSpec)
  }

  public interface ObserveSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated string var = 1;
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
     * </pre>
     */
    java.util.List<java.lang.String>
    getVarList();
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
     * </pre>
     */
    int getVarCount();
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
     * </pre>
     */
    java.lang.String getVar(int index);
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
     * </pre>
     */
    com.google.protobuf.ByteString
        getVarBytes(int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.ObserveSpec}
   *
   * <pre>
   * Observe variables at a tracepoint 
   * </pre>
   */
  public static final class ObserveSpec extends
      com.google.protobuf.GeneratedMessage
      implements ObserveSpecOrBuilder {
    // Use ObserveSpec.newBuilder() to construct.
    private ObserveSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ObserveSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ObserveSpec defaultInstance;
    public static ObserveSpec getDefaultInstance() {
      return defaultInstance;
    }

    public ObserveSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ObserveSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                var_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              var_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          var_ = new com.google.protobuf.UnmodifiableLazyStringList(var_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_ObserveSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_ObserveSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<ObserveSpec> PARSER =
        new com.google.protobuf.AbstractParser<ObserveSpec>() {
      public ObserveSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ObserveSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ObserveSpec> getParserForType() {
      return PARSER;
    }

    // repeated string var = 1;
    public static final int VAR_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList var_;
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
     * </pre>
     */
    public java.util.List<java.lang.String>
        getVarList() {
      return var_;
    }
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
     * </pre>
     */
    public int getVarCount() {
      return var_.size();
    }
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
     * </pre>
     */
    public java.lang.String getVar(int index) {
      return var_.get(index);
    }
    /**
     * <code>repeated string var = 1;</code>
     *
     * <pre>
     * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getVarBytes(int index) {
      return var_.getByteString(index);
    }

    private void initFields() {
      var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < var_.size(); i++) {
        output.writeBytes(1, var_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < var_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(var_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getVarList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.ObserveSpec}
     *
     * <pre>
     * Observe variables at a tracepoint 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_ObserveSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_ObserveSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_ObserveSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          var_ = new com.google.protobuf.UnmodifiableLazyStringList(
              var_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.var_ = var_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec.getDefaultInstance()) return this;
        if (!other.var_.isEmpty()) {
          if (var_.isEmpty()) {
            var_ = other.var_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureVarIsMutable();
            var_.addAll(other.var_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.ObserveSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated string var = 1;
      private com.google.protobuf.LazyStringList var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureVarIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          var_ = new com.google.protobuf.LazyStringArrayList(var_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public java.util.List<java.lang.String>
          getVarList() {
        return java.util.Collections.unmodifiableList(var_);
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public int getVarCount() {
        return var_.size();
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public java.lang.String getVar(int index) {
        return var_.get(index);
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getVarBytes(int index) {
        return var_.getByteString(index);
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public Builder setVar(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public Builder addVar(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public Builder addAllVar(
          java.lang.Iterable<java.lang.String> values) {
        ensureVarIsMutable();
        super.addAll(values, var_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public Builder clearVar() {
        var_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string var = 1;</code>
       *
       * <pre>
       * Named variables to observe. Variable names must correspond to variables exported by the tracepoint. 
       * </pre>
       */
      public Builder addVarBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureVarIsMutable();
        var_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.ObserveSpec)
    }

    static {
      defaultInstance = new ObserveSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.ObserveSpec)
  }

  public interface UnpackSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bytes bagId = 1;
    /**
     * <code>required bytes bagId = 1;</code>
     *
     * <pre>
     * ID of the bag containing the tuples
     * </pre>
     */
    boolean hasBagId();
    /**
     * <code>required bytes bagId = 1;</code>
     *
     * <pre>
     * ID of the bag containing the tuples
     * </pre>
     */
    com.google.protobuf.ByteString getBagId();

    // optional .pivottracingspec.TupleSpec tupleSpec = 2;
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    boolean hasTupleSpec();
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec();
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder();

    // optional .pivottracingspec.FilterSpec filterSpec = 3;
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    boolean hasFilterSpec();
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec getFilterSpec();
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder getFilterSpecOrBuilder();

    // optional .pivottracingspec.GroupBySpec groupBySpec = 4;
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    boolean hasGroupBySpec();
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec();
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder();
  }
  /**
   * Protobuf type {@code pivottracingspec.UnpackSpec}
   *
   * <pre>
   * Unpacks tuples from the baggage 
   * </pre>
   */
  public static final class UnpackSpec extends
      com.google.protobuf.GeneratedMessage
      implements UnpackSpecOrBuilder {
    // Use UnpackSpec.newBuilder() to construct.
    private UnpackSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UnpackSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final UnpackSpec defaultInstance;
    public static UnpackSpec getDefaultInstance() {
      return defaultInstance;
    }

    public UnpackSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private UnpackSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              bagId_ = input.readBytes();
              break;
            }
            case 18: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = tupleSpec_.toBuilder();
              }
              tupleSpec_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tupleSpec_);
                tupleSpec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = filterSpec_.toBuilder();
              }
              filterSpec_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filterSpec_);
                filterSpec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = groupBySpec_.toBuilder();
              }
              groupBySpec_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupBySpec_);
                groupBySpec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_UnpackSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_UnpackSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<UnpackSpec> PARSER =
        new com.google.protobuf.AbstractParser<UnpackSpec>() {
      public UnpackSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UnpackSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<UnpackSpec> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes bagId = 1;
    public static final int BAGID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString bagId_;
    /**
     * <code>required bytes bagId = 1;</code>
     *
     * <pre>
     * ID of the bag containing the tuples
     * </pre>
     */
    public boolean hasBagId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes bagId = 1;</code>
     *
     * <pre>
     * ID of the bag containing the tuples
     * </pre>
     */
    public com.google.protobuf.ByteString getBagId() {
      return bagId_;
    }

    // optional .pivottracingspec.TupleSpec tupleSpec = 2;
    public static final int TUPLESPEC_FIELD_NUMBER = 2;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec tupleSpec_;
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    public boolean hasTupleSpec() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec() {
      return tupleSpec_;
    }
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder() {
      return tupleSpec_;
    }

    // optional .pivottracingspec.FilterSpec filterSpec = 3;
    public static final int FILTERSPEC_FIELD_NUMBER = 3;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec filterSpec_;
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    public boolean hasFilterSpec() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec getFilterSpec() {
      return filterSpec_;
    }
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder getFilterSpecOrBuilder() {
      return filterSpec_;
    }

    // optional .pivottracingspec.GroupBySpec groupBySpec = 4;
    public static final int GROUPBYSPEC_FIELD_NUMBER = 4;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec groupBySpec_;
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    public boolean hasGroupBySpec() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec() {
      return groupBySpec_;
    }
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder() {
      return groupBySpec_;
    }

    private void initFields() {
      bagId_ = com.google.protobuf.ByteString.EMPTY;
      tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
      filterSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
      groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasBagId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasFilterSpec()) {
        if (!getFilterSpec().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGroupBySpec()) {
        if (!getGroupBySpec().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, bagId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, tupleSpec_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, filterSpec_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, groupBySpec_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, bagId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, tupleSpec_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, filterSpec_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, groupBySpec_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.UnpackSpec}
     *
     * <pre>
     * Unpacks tuples from the baggage 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_UnpackSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_UnpackSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTupleSpecFieldBuilder();
          getFilterSpecFieldBuilder();
          getGroupBySpecFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bagId_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
        } else {
          tupleSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (filterSpecBuilder_ == null) {
          filterSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
        } else {
          filterSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
        } else {
          groupBySpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_UnpackSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bagId_ = bagId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (tupleSpecBuilder_ == null) {
          result.tupleSpec_ = tupleSpec_;
        } else {
          result.tupleSpec_ = tupleSpecBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (filterSpecBuilder_ == null) {
          result.filterSpec_ = filterSpec_;
        } else {
          result.filterSpec_ = filterSpecBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (groupBySpecBuilder_ == null) {
          result.groupBySpec_ = groupBySpec_;
        } else {
          result.groupBySpec_ = groupBySpecBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec.getDefaultInstance()) return this;
        if (other.hasBagId()) {
          setBagId(other.getBagId());
        }
        if (other.hasTupleSpec()) {
          mergeTupleSpec(other.getTupleSpec());
        }
        if (other.hasFilterSpec()) {
          mergeFilterSpec(other.getFilterSpec());
        }
        if (other.hasGroupBySpec()) {
          mergeGroupBySpec(other.getGroupBySpec());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasBagId()) {
          
          return false;
        }
        if (hasFilterSpec()) {
          if (!getFilterSpec().isInitialized()) {
            
            return false;
          }
        }
        if (hasGroupBySpec()) {
          if (!getGroupBySpec().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.UnpackSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes bagId = 1;
      private com.google.protobuf.ByteString bagId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes bagId = 1;</code>
       *
       * <pre>
       * ID of the bag containing the tuples
       * </pre>
       */
      public boolean hasBagId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes bagId = 1;</code>
       *
       * <pre>
       * ID of the bag containing the tuples
       * </pre>
       */
      public com.google.protobuf.ByteString getBagId() {
        return bagId_;
      }
      /**
       * <code>required bytes bagId = 1;</code>
       *
       * <pre>
       * ID of the bag containing the tuples
       * </pre>
       */
      public Builder setBagId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        bagId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes bagId = 1;</code>
       *
       * <pre>
       * ID of the bag containing the tuples
       * </pre>
       */
      public Builder clearBagId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bagId_ = getDefaultInstance().getBagId();
        onChanged();
        return this;
      }

      // optional .pivottracingspec.TupleSpec tupleSpec = 2;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder> tupleSpecBuilder_;
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public boolean hasTupleSpec() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec() {
        if (tupleSpecBuilder_ == null) {
          return tupleSpec_;
        } else {
          return tupleSpecBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public Builder setTupleSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec value) {
        if (tupleSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tupleSpec_ = value;
          onChanged();
        } else {
          tupleSpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public Builder setTupleSpec(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder builderForValue) {
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = builderForValue.build();
          onChanged();
        } else {
          tupleSpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public Builder mergeTupleSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec value) {
        if (tupleSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              tupleSpec_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance()) {
            tupleSpec_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.newBuilder(tupleSpec_).mergeFrom(value).buildPartial();
          } else {
            tupleSpec_ = value;
          }
          onChanged();
        } else {
          tupleSpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public Builder clearTupleSpec() {
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
          onChanged();
        } else {
          tupleSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder getTupleSpecBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTupleSpecFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder() {
        if (tupleSpecBuilder_ != null) {
          return tupleSpecBuilder_.getMessageOrBuilder();
        } else {
          return tupleSpec_;
        }
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder> 
          getTupleSpecFieldBuilder() {
        if (tupleSpecBuilder_ == null) {
          tupleSpecBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder>(
                  tupleSpec_,
                  getParentForChildren(),
                  isClean());
          tupleSpec_ = null;
        }
        return tupleSpecBuilder_;
      }

      // optional .pivottracingspec.FilterSpec filterSpec = 3;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec filterSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder> filterSpecBuilder_;
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public boolean hasFilterSpec() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec getFilterSpec() {
        if (filterSpecBuilder_ == null) {
          return filterSpec_;
        } else {
          return filterSpecBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public Builder setFilterSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec value) {
        if (filterSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filterSpec_ = value;
          onChanged();
        } else {
          filterSpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public Builder setFilterSpec(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder builderForValue) {
        if (filterSpecBuilder_ == null) {
          filterSpec_ = builderForValue.build();
          onChanged();
        } else {
          filterSpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public Builder mergeFilterSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec value) {
        if (filterSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              filterSpec_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance()) {
            filterSpec_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.newBuilder(filterSpec_).mergeFrom(value).buildPartial();
          } else {
            filterSpec_ = value;
          }
          onChanged();
        } else {
          filterSpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public Builder clearFilterSpec() {
        if (filterSpecBuilder_ == null) {
          filterSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
          onChanged();
        } else {
          filterSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder getFilterSpecBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFilterSpecFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder getFilterSpecOrBuilder() {
        if (filterSpecBuilder_ != null) {
          return filterSpecBuilder_.getMessageOrBuilder();
        } else {
          return filterSpec_;
        }
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder> 
          getFilterSpecFieldBuilder() {
        if (filterSpecBuilder_ == null) {
          filterSpecBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder>(
                  filterSpec_,
                  getParentForChildren(),
                  isClean());
          filterSpec_ = null;
        }
        return filterSpecBuilder_;
      }

      // optional .pivottracingspec.GroupBySpec groupBySpec = 4;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder> groupBySpecBuilder_;
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public boolean hasGroupBySpec() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec() {
        if (groupBySpecBuilder_ == null) {
          return groupBySpec_;
        } else {
          return groupBySpecBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public Builder setGroupBySpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec value) {
        if (groupBySpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupBySpec_ = value;
          onChanged();
        } else {
          groupBySpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public Builder setGroupBySpec(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder builderForValue) {
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = builderForValue.build();
          onChanged();
        } else {
          groupBySpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public Builder mergeGroupBySpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec value) {
        if (groupBySpecBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              groupBySpec_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance()) {
            groupBySpec_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.newBuilder(groupBySpec_).mergeFrom(value).buildPartial();
          } else {
            groupBySpec_ = value;
          }
          onChanged();
        } else {
          groupBySpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public Builder clearGroupBySpec() {
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
          onChanged();
        } else {
          groupBySpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder getGroupBySpecBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getGroupBySpecFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder() {
        if (groupBySpecBuilder_ != null) {
          return groupBySpecBuilder_.getMessageOrBuilder();
        } else {
          return groupBySpec_;
        }
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder> 
          getGroupBySpecFieldBuilder() {
        if (groupBySpecBuilder_ == null) {
          groupBySpecBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder>(
                  groupBySpec_,
                  getParentForChildren(),
                  isClean());
          groupBySpec_ = null;
        }
        return groupBySpecBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.UnpackSpec)
    }

    static {
      defaultInstance = new UnpackSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.UnpackSpec)
  }

  public interface LetSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string var = 1;
    /**
     * <code>required string var = 1;</code>
     *
     * <pre>
     * Name of the variable being constructed
     * </pre>
     */
    boolean hasVar();
    /**
     * <code>required string var = 1;</code>
     *
     * <pre>
     * Name of the variable being constructed
     * </pre>
     */
    java.lang.String getVar();
    /**
     * <code>required string var = 1;</code>
     *
     * <pre>
     * Name of the variable being constructed
     * </pre>
     */
    com.google.protobuf.ByteString
        getVarBytes();

    // required string expression = 2;
    /**
     * <code>required string expression = 2;</code>
     *
     * <pre>
     * The expression for calculating the new value.
     * </pre>
     */
    boolean hasExpression();
    /**
     * <code>required string expression = 2;</code>
     *
     * <pre>
     * The expression for calculating the new value.
     * </pre>
     */
    java.lang.String getExpression();
    /**
     * <code>required string expression = 2;</code>
     *
     * <pre>
     * The expression for calculating the new value.
     * </pre>
     */
    com.google.protobuf.ByteString
        getExpressionBytes();

    // repeated string replacementVariables = 3;
    /**
     * <code>repeated string replacementVariables = 3;</code>
     *
     * <pre>
     * Replacement variables for the expression.    
     * </pre>
     */
    java.util.List<java.lang.String>
    getReplacementVariablesList();
    /**
     * <code>repeated string replacementVariables = 3;</code>
     *
     * <pre>
     * Replacement variables for the expression.    
     * </pre>
     */
    int getReplacementVariablesCount();
    /**
     * <code>repeated string replacementVariables = 3;</code>
     *
     * <pre>
     * Replacement variables for the expression.    
     * </pre>
     */
    java.lang.String getReplacementVariables(int index);
    /**
     * <code>repeated string replacementVariables = 3;</code>
     *
     * <pre>
     * Replacement variables for the expression.    
     * </pre>
     */
    com.google.protobuf.ByteString
        getReplacementVariablesBytes(int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.LetSpec}
   *
   * <pre>
   * Calculate and append a new value to the tuple 
   * </pre>
   */
  public static final class LetSpec extends
      com.google.protobuf.GeneratedMessage
      implements LetSpecOrBuilder {
    // Use LetSpec.newBuilder() to construct.
    private LetSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LetSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LetSpec defaultInstance;
    public static LetSpec getDefaultInstance() {
      return defaultInstance;
    }

    public LetSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LetSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              var_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              expression_ = input.readBytes();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                replacementVariables_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              replacementVariables_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          replacementVariables_ = new com.google.protobuf.UnmodifiableLazyStringList(replacementVariables_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_LetSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_LetSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<LetSpec> PARSER =
        new com.google.protobuf.AbstractParser<LetSpec>() {
      public LetSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LetSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LetSpec> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string var = 1;
    public static final int VAR_FIELD_NUMBER = 1;
    private java.lang.Object var_;
    /**
     * <code>required string var = 1;</code>
     *
     * <pre>
     * Name of the variable being constructed
     * </pre>
     */
    public boolean hasVar() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string var = 1;</code>
     *
     * <pre>
     * Name of the variable being constructed
     * </pre>
     */
    public java.lang.String getVar() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          var_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string var = 1;</code>
     *
     * <pre>
     * Name of the variable being constructed
     * </pre>
     */
    public com.google.protobuf.ByteString
        getVarBytes() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        var_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string expression = 2;
    public static final int EXPRESSION_FIELD_NUMBER = 2;
    private java.lang.Object expression_;
    /**
     * <code>required string expression = 2;</code>
     *
     * <pre>
     * The expression for calculating the new value.
     * </pre>
     */
    public boolean hasExpression() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string expression = 2;</code>
     *
     * <pre>
     * The expression for calculating the new value.
     * </pre>
     */
    public java.lang.String getExpression() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          expression_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string expression = 2;</code>
     *
     * <pre>
     * The expression for calculating the new value.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        expression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated string replacementVariables = 3;
    public static final int REPLACEMENTVARIABLES_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList replacementVariables_;
    /**
     * <code>repeated string replacementVariables = 3;</code>
     *
     * <pre>
     * Replacement variables for the expression.    
     * </pre>
     */
    public java.util.List<java.lang.String>
        getReplacementVariablesList() {
      return replacementVariables_;
    }
    /**
     * <code>repeated string replacementVariables = 3;</code>
     *
     * <pre>
     * Replacement variables for the expression.    
     * </pre>
     */
    public int getReplacementVariablesCount() {
      return replacementVariables_.size();
    }
    /**
     * <code>repeated string replacementVariables = 3;</code>
     *
     * <pre>
     * Replacement variables for the expression.    
     * </pre>
     */
    public java.lang.String getReplacementVariables(int index) {
      return replacementVariables_.get(index);
    }
    /**
     * <code>repeated string replacementVariables = 3;</code>
     *
     * <pre>
     * Replacement variables for the expression.    
     * </pre>
     */
    public com.google.protobuf.ByteString
        getReplacementVariablesBytes(int index) {
      return replacementVariables_.getByteString(index);
    }

    private void initFields() {
      var_ = "";
      expression_ = "";
      replacementVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasVar()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasExpression()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getVarBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getExpressionBytes());
      }
      for (int i = 0; i < replacementVariables_.size(); i++) {
        output.writeBytes(3, replacementVariables_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getVarBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getExpressionBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < replacementVariables_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(replacementVariables_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getReplacementVariablesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.LetSpec}
     *
     * <pre>
     * Calculate and append a new value to the tuple 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_LetSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_LetSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        var_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        expression_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        replacementVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_LetSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.var_ = var_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.expression_ = expression_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          replacementVariables_ = new com.google.protobuf.UnmodifiableLazyStringList(
              replacementVariables_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.replacementVariables_ = replacementVariables_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec.getDefaultInstance()) return this;
        if (other.hasVar()) {
          bitField0_ |= 0x00000001;
          var_ = other.var_;
          onChanged();
        }
        if (other.hasExpression()) {
          bitField0_ |= 0x00000002;
          expression_ = other.expression_;
          onChanged();
        }
        if (!other.replacementVariables_.isEmpty()) {
          if (replacementVariables_.isEmpty()) {
            replacementVariables_ = other.replacementVariables_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureReplacementVariablesIsMutable();
            replacementVariables_.addAll(other.replacementVariables_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVar()) {
          
          return false;
        }
        if (!hasExpression()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.LetSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string var = 1;
      private java.lang.Object var_ = "";
      /**
       * <code>required string var = 1;</code>
       *
       * <pre>
       * Name of the variable being constructed
       * </pre>
       */
      public boolean hasVar() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string var = 1;</code>
       *
       * <pre>
       * Name of the variable being constructed
       * </pre>
       */
      public java.lang.String getVar() {
        java.lang.Object ref = var_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          var_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string var = 1;</code>
       *
       * <pre>
       * Name of the variable being constructed
       * </pre>
       */
      public com.google.protobuf.ByteString
          getVarBytes() {
        java.lang.Object ref = var_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          var_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string var = 1;</code>
       *
       * <pre>
       * Name of the variable being constructed
       * </pre>
       */
      public Builder setVar(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        var_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string var = 1;</code>
       *
       * <pre>
       * Name of the variable being constructed
       * </pre>
       */
      public Builder clearVar() {
        bitField0_ = (bitField0_ & ~0x00000001);
        var_ = getDefaultInstance().getVar();
        onChanged();
        return this;
      }
      /**
       * <code>required string var = 1;</code>
       *
       * <pre>
       * Name of the variable being constructed
       * </pre>
       */
      public Builder setVarBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        var_ = value;
        onChanged();
        return this;
      }

      // required string expression = 2;
      private java.lang.Object expression_ = "";
      /**
       * <code>required string expression = 2;</code>
       *
       * <pre>
       * The expression for calculating the new value.
       * </pre>
       */
      public boolean hasExpression() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string expression = 2;</code>
       *
       * <pre>
       * The expression for calculating the new value.
       * </pre>
       */
      public java.lang.String getExpression() {
        java.lang.Object ref = expression_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          expression_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string expression = 2;</code>
       *
       * <pre>
       * The expression for calculating the new value.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getExpressionBytes() {
        java.lang.Object ref = expression_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          expression_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string expression = 2;</code>
       *
       * <pre>
       * The expression for calculating the new value.
       * </pre>
       */
      public Builder setExpression(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string expression = 2;</code>
       *
       * <pre>
       * The expression for calculating the new value.
       * </pre>
       */
      public Builder clearExpression() {
        bitField0_ = (bitField0_ & ~0x00000002);
        expression_ = getDefaultInstance().getExpression();
        onChanged();
        return this;
      }
      /**
       * <code>required string expression = 2;</code>
       *
       * <pre>
       * The expression for calculating the new value.
       * </pre>
       */
      public Builder setExpressionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        expression_ = value;
        onChanged();
        return this;
      }

      // repeated string replacementVariables = 3;
      private com.google.protobuf.LazyStringList replacementVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureReplacementVariablesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          replacementVariables_ = new com.google.protobuf.LazyStringArrayList(replacementVariables_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public java.util.List<java.lang.String>
          getReplacementVariablesList() {
        return java.util.Collections.unmodifiableList(replacementVariables_);
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public int getReplacementVariablesCount() {
        return replacementVariables_.size();
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public java.lang.String getReplacementVariables(int index) {
        return replacementVariables_.get(index);
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public com.google.protobuf.ByteString
          getReplacementVariablesBytes(int index) {
        return replacementVariables_.getByteString(index);
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public Builder setReplacementVariables(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacementVariablesIsMutable();
        replacementVariables_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public Builder addReplacementVariables(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacementVariablesIsMutable();
        replacementVariables_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public Builder addAllReplacementVariables(
          java.lang.Iterable<java.lang.String> values) {
        ensureReplacementVariablesIsMutable();
        super.addAll(values, replacementVariables_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public Builder clearReplacementVariables() {
        replacementVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replacementVariables = 3;</code>
       *
       * <pre>
       * Replacement variables for the expression.    
       * </pre>
       */
      public Builder addReplacementVariablesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacementVariablesIsMutable();
        replacementVariables_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.LetSpec)
    }

    static {
      defaultInstance = new LetSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.LetSpec)
  }

  public interface WhereSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string predicate = 1;
    /**
     * <code>required string predicate = 1;</code>
     *
     * <pre>
     * The predicate to calculate.
     * </pre>
     */
    boolean hasPredicate();
    /**
     * <code>required string predicate = 1;</code>
     *
     * <pre>
     * The predicate to calculate.
     * </pre>
     */
    java.lang.String getPredicate();
    /**
     * <code>required string predicate = 1;</code>
     *
     * <pre>
     * The predicate to calculate.
     * </pre>
     */
    com.google.protobuf.ByteString
        getPredicateBytes();

    // repeated string replacementVariables = 2;
    /**
     * <code>repeated string replacementVariables = 2;</code>
     *
     * <pre>
     * Replacement variables for the predicate.
     * </pre>
     */
    java.util.List<java.lang.String>
    getReplacementVariablesList();
    /**
     * <code>repeated string replacementVariables = 2;</code>
     *
     * <pre>
     * Replacement variables for the predicate.
     * </pre>
     */
    int getReplacementVariablesCount();
    /**
     * <code>repeated string replacementVariables = 2;</code>
     *
     * <pre>
     * Replacement variables for the predicate.
     * </pre>
     */
    java.lang.String getReplacementVariables(int index);
    /**
     * <code>repeated string replacementVariables = 2;</code>
     *
     * <pre>
     * Replacement variables for the predicate.
     * </pre>
     */
    com.google.protobuf.ByteString
        getReplacementVariablesBytes(int index);
  }
  /**
   * Protobuf type {@code pivottracingspec.WhereSpec}
   *
   * <pre>
   * Drop the tuple if it doesn't satisfy a predicate 
   * </pre>
   */
  public static final class WhereSpec extends
      com.google.protobuf.GeneratedMessage
      implements WhereSpecOrBuilder {
    // Use WhereSpec.newBuilder() to construct.
    private WhereSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private WhereSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final WhereSpec defaultInstance;
    public static WhereSpec getDefaultInstance() {
      return defaultInstance;
    }

    public WhereSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private WhereSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              predicate_ = input.readBytes();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                replacementVariables_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              replacementVariables_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          replacementVariables_ = new com.google.protobuf.UnmodifiableLazyStringList(replacementVariables_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_WhereSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_WhereSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<WhereSpec> PARSER =
        new com.google.protobuf.AbstractParser<WhereSpec>() {
      public WhereSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WhereSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WhereSpec> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string predicate = 1;
    public static final int PREDICATE_FIELD_NUMBER = 1;
    private java.lang.Object predicate_;
    /**
     * <code>required string predicate = 1;</code>
     *
     * <pre>
     * The predicate to calculate.
     * </pre>
     */
    public boolean hasPredicate() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string predicate = 1;</code>
     *
     * <pre>
     * The predicate to calculate.
     * </pre>
     */
    public java.lang.String getPredicate() {
      java.lang.Object ref = predicate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          predicate_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string predicate = 1;</code>
     *
     * <pre>
     * The predicate to calculate.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPredicateBytes() {
      java.lang.Object ref = predicate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        predicate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated string replacementVariables = 2;
    public static final int REPLACEMENTVARIABLES_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList replacementVariables_;
    /**
     * <code>repeated string replacementVariables = 2;</code>
     *
     * <pre>
     * Replacement variables for the predicate.
     * </pre>
     */
    public java.util.List<java.lang.String>
        getReplacementVariablesList() {
      return replacementVariables_;
    }
    /**
     * <code>repeated string replacementVariables = 2;</code>
     *
     * <pre>
     * Replacement variables for the predicate.
     * </pre>
     */
    public int getReplacementVariablesCount() {
      return replacementVariables_.size();
    }
    /**
     * <code>repeated string replacementVariables = 2;</code>
     *
     * <pre>
     * Replacement variables for the predicate.
     * </pre>
     */
    public java.lang.String getReplacementVariables(int index) {
      return replacementVariables_.get(index);
    }
    /**
     * <code>repeated string replacementVariables = 2;</code>
     *
     * <pre>
     * Replacement variables for the predicate.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getReplacementVariablesBytes(int index) {
      return replacementVariables_.getByteString(index);
    }

    private void initFields() {
      predicate_ = "";
      replacementVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPredicate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getPredicateBytes());
      }
      for (int i = 0; i < replacementVariables_.size(); i++) {
        output.writeBytes(2, replacementVariables_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getPredicateBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < replacementVariables_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(replacementVariables_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getReplacementVariablesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.WhereSpec}
     *
     * <pre>
     * Drop the tuple if it doesn't satisfy a predicate 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_WhereSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_WhereSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        predicate_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        replacementVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_WhereSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.predicate_ = predicate_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          replacementVariables_ = new com.google.protobuf.UnmodifiableLazyStringList(
              replacementVariables_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.replacementVariables_ = replacementVariables_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec.getDefaultInstance()) return this;
        if (other.hasPredicate()) {
          bitField0_ |= 0x00000001;
          predicate_ = other.predicate_;
          onChanged();
        }
        if (!other.replacementVariables_.isEmpty()) {
          if (replacementVariables_.isEmpty()) {
            replacementVariables_ = other.replacementVariables_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureReplacementVariablesIsMutable();
            replacementVariables_.addAll(other.replacementVariables_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPredicate()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.WhereSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string predicate = 1;
      private java.lang.Object predicate_ = "";
      /**
       * <code>required string predicate = 1;</code>
       *
       * <pre>
       * The predicate to calculate.
       * </pre>
       */
      public boolean hasPredicate() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string predicate = 1;</code>
       *
       * <pre>
       * The predicate to calculate.
       * </pre>
       */
      public java.lang.String getPredicate() {
        java.lang.Object ref = predicate_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          predicate_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string predicate = 1;</code>
       *
       * <pre>
       * The predicate to calculate.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPredicateBytes() {
        java.lang.Object ref = predicate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          predicate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string predicate = 1;</code>
       *
       * <pre>
       * The predicate to calculate.
       * </pre>
       */
      public Builder setPredicate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        predicate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string predicate = 1;</code>
       *
       * <pre>
       * The predicate to calculate.
       * </pre>
       */
      public Builder clearPredicate() {
        bitField0_ = (bitField0_ & ~0x00000001);
        predicate_ = getDefaultInstance().getPredicate();
        onChanged();
        return this;
      }
      /**
       * <code>required string predicate = 1;</code>
       *
       * <pre>
       * The predicate to calculate.
       * </pre>
       */
      public Builder setPredicateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        predicate_ = value;
        onChanged();
        return this;
      }

      // repeated string replacementVariables = 2;
      private com.google.protobuf.LazyStringList replacementVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureReplacementVariablesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          replacementVariables_ = new com.google.protobuf.LazyStringArrayList(replacementVariables_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public java.util.List<java.lang.String>
          getReplacementVariablesList() {
        return java.util.Collections.unmodifiableList(replacementVariables_);
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public int getReplacementVariablesCount() {
        return replacementVariables_.size();
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public java.lang.String getReplacementVariables(int index) {
        return replacementVariables_.get(index);
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getReplacementVariablesBytes(int index) {
        return replacementVariables_.getByteString(index);
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public Builder setReplacementVariables(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacementVariablesIsMutable();
        replacementVariables_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public Builder addReplacementVariables(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacementVariablesIsMutable();
        replacementVariables_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public Builder addAllReplacementVariables(
          java.lang.Iterable<java.lang.String> values) {
        ensureReplacementVariablesIsMutable();
        super.addAll(values, replacementVariables_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public Builder clearReplacementVariables() {
        replacementVariables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string replacementVariables = 2;</code>
       *
       * <pre>
       * Replacement variables for the predicate.
       * </pre>
       */
      public Builder addReplacementVariablesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureReplacementVariablesIsMutable();
        replacementVariables_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.WhereSpec)
    }

    static {
      defaultInstance = new WhereSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.WhereSpec)
  }

  public interface PackSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bytes bagId = 1;
    /**
     * <code>required bytes bagId = 1;</code>
     *
     * <pre>
     * ID of the bag containing the tuples
     * </pre>
     */
    boolean hasBagId();
    /**
     * <code>required bytes bagId = 1;</code>
     *
     * <pre>
     * ID of the bag containing the tuples
     * </pre>
     */
    com.google.protobuf.ByteString getBagId();

    // optional .pivottracingspec.TupleSpec tupleSpec = 2;
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    boolean hasTupleSpec();
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec();
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder();

    // optional .pivottracingspec.FilterSpec filterSpec = 3;
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    boolean hasFilterSpec();
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec getFilterSpec();
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder getFilterSpecOrBuilder();

    // optional .pivottracingspec.GroupBySpec groupBySpec = 4;
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    boolean hasGroupBySpec();
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec();
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder();
  }
  /**
   * Protobuf type {@code pivottracingspec.PackSpec}
   *
   * <pre>
   * Packs a tuple into the baggage 
   * </pre>
   */
  public static final class PackSpec extends
      com.google.protobuf.GeneratedMessage
      implements PackSpecOrBuilder {
    // Use PackSpec.newBuilder() to construct.
    private PackSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PackSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PackSpec defaultInstance;
    public static PackSpec getDefaultInstance() {
      return defaultInstance;
    }

    public PackSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PackSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              bagId_ = input.readBytes();
              break;
            }
            case 18: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = tupleSpec_.toBuilder();
              }
              tupleSpec_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tupleSpec_);
                tupleSpec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = filterSpec_.toBuilder();
              }
              filterSpec_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filterSpec_);
                filterSpec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = groupBySpec_.toBuilder();
              }
              groupBySpec_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupBySpec_);
                groupBySpec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_PackSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_PackSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<PackSpec> PARSER =
        new com.google.protobuf.AbstractParser<PackSpec>() {
      public PackSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PackSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PackSpec> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes bagId = 1;
    public static final int BAGID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString bagId_;
    /**
     * <code>required bytes bagId = 1;</code>
     *
     * <pre>
     * ID of the bag containing the tuples
     * </pre>
     */
    public boolean hasBagId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes bagId = 1;</code>
     *
     * <pre>
     * ID of the bag containing the tuples
     * </pre>
     */
    public com.google.protobuf.ByteString getBagId() {
      return bagId_;
    }

    // optional .pivottracingspec.TupleSpec tupleSpec = 2;
    public static final int TUPLESPEC_FIELD_NUMBER = 2;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec tupleSpec_;
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    public boolean hasTupleSpec() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec() {
      return tupleSpec_;
    }
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just unpack raw tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder() {
      return tupleSpec_;
    }

    // optional .pivottracingspec.FilterSpec filterSpec = 3;
    public static final int FILTERSPEC_FIELD_NUMBER = 3;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec filterSpec_;
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    public boolean hasFilterSpec() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec getFilterSpec() {
      return filterSpec_;
    }
    /**
     * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
     *
     * <pre>
     * Unpack raw tuples with a filter applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder getFilterSpecOrBuilder() {
      return filterSpec_;
    }

    // optional .pivottracingspec.GroupBySpec groupBySpec = 4;
    public static final int GROUPBYSPEC_FIELD_NUMBER = 4;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec groupBySpec_;
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    public boolean hasGroupBySpec() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec() {
      return groupBySpec_;
    }
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
     *
     * <pre>
     * Unpack grouped tuples with aggregations applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder() {
      return groupBySpec_;
    }

    private void initFields() {
      bagId_ = com.google.protobuf.ByteString.EMPTY;
      tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
      filterSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
      groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasBagId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasFilterSpec()) {
        if (!getFilterSpec().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGroupBySpec()) {
        if (!getGroupBySpec().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, bagId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, tupleSpec_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, filterSpec_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, groupBySpec_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, bagId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, tupleSpec_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, filterSpec_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, groupBySpec_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.PackSpec}
     *
     * <pre>
     * Packs a tuple into the baggage 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_PackSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_PackSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTupleSpecFieldBuilder();
          getFilterSpecFieldBuilder();
          getGroupBySpecFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bagId_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
        } else {
          tupleSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (filterSpecBuilder_ == null) {
          filterSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
        } else {
          filterSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
        } else {
          groupBySpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_PackSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bagId_ = bagId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (tupleSpecBuilder_ == null) {
          result.tupleSpec_ = tupleSpec_;
        } else {
          result.tupleSpec_ = tupleSpecBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (filterSpecBuilder_ == null) {
          result.filterSpec_ = filterSpec_;
        } else {
          result.filterSpec_ = filterSpecBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (groupBySpecBuilder_ == null) {
          result.groupBySpec_ = groupBySpec_;
        } else {
          result.groupBySpec_ = groupBySpecBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec.getDefaultInstance()) return this;
        if (other.hasBagId()) {
          setBagId(other.getBagId());
        }
        if (other.hasTupleSpec()) {
          mergeTupleSpec(other.getTupleSpec());
        }
        if (other.hasFilterSpec()) {
          mergeFilterSpec(other.getFilterSpec());
        }
        if (other.hasGroupBySpec()) {
          mergeGroupBySpec(other.getGroupBySpec());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasBagId()) {
          
          return false;
        }
        if (hasFilterSpec()) {
          if (!getFilterSpec().isInitialized()) {
            
            return false;
          }
        }
        if (hasGroupBySpec()) {
          if (!getGroupBySpec().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.PackSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes bagId = 1;
      private com.google.protobuf.ByteString bagId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes bagId = 1;</code>
       *
       * <pre>
       * ID of the bag containing the tuples
       * </pre>
       */
      public boolean hasBagId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes bagId = 1;</code>
       *
       * <pre>
       * ID of the bag containing the tuples
       * </pre>
       */
      public com.google.protobuf.ByteString getBagId() {
        return bagId_;
      }
      /**
       * <code>required bytes bagId = 1;</code>
       *
       * <pre>
       * ID of the bag containing the tuples
       * </pre>
       */
      public Builder setBagId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        bagId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes bagId = 1;</code>
       *
       * <pre>
       * ID of the bag containing the tuples
       * </pre>
       */
      public Builder clearBagId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bagId_ = getDefaultInstance().getBagId();
        onChanged();
        return this;
      }

      // optional .pivottracingspec.TupleSpec tupleSpec = 2;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder> tupleSpecBuilder_;
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public boolean hasTupleSpec() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec() {
        if (tupleSpecBuilder_ == null) {
          return tupleSpec_;
        } else {
          return tupleSpecBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public Builder setTupleSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec value) {
        if (tupleSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tupleSpec_ = value;
          onChanged();
        } else {
          tupleSpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public Builder setTupleSpec(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder builderForValue) {
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = builderForValue.build();
          onChanged();
        } else {
          tupleSpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public Builder mergeTupleSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec value) {
        if (tupleSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              tupleSpec_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance()) {
            tupleSpec_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.newBuilder(tupleSpec_).mergeFrom(value).buildPartial();
          } else {
            tupleSpec_ = value;
          }
          onChanged();
        } else {
          tupleSpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public Builder clearTupleSpec() {
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
          onChanged();
        } else {
          tupleSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder getTupleSpecBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTupleSpecFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder() {
        if (tupleSpecBuilder_ != null) {
          return tupleSpecBuilder_.getMessageOrBuilder();
        } else {
          return tupleSpec_;
        }
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just unpack raw tuples
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder> 
          getTupleSpecFieldBuilder() {
        if (tupleSpecBuilder_ == null) {
          tupleSpecBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder>(
                  tupleSpec_,
                  getParentForChildren(),
                  isClean());
          tupleSpec_ = null;
        }
        return tupleSpecBuilder_;
      }

      // optional .pivottracingspec.FilterSpec filterSpec = 3;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec filterSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder> filterSpecBuilder_;
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public boolean hasFilterSpec() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec getFilterSpec() {
        if (filterSpecBuilder_ == null) {
          return filterSpec_;
        } else {
          return filterSpecBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public Builder setFilterSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec value) {
        if (filterSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filterSpec_ = value;
          onChanged();
        } else {
          filterSpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public Builder setFilterSpec(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder builderForValue) {
        if (filterSpecBuilder_ == null) {
          filterSpec_ = builderForValue.build();
          onChanged();
        } else {
          filterSpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public Builder mergeFilterSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec value) {
        if (filterSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              filterSpec_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance()) {
            filterSpec_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.newBuilder(filterSpec_).mergeFrom(value).buildPartial();
          } else {
            filterSpec_ = value;
          }
          onChanged();
        } else {
          filterSpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public Builder clearFilterSpec() {
        if (filterSpecBuilder_ == null) {
          filterSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.getDefaultInstance();
          onChanged();
        } else {
          filterSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder getFilterSpecBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFilterSpecFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder getFilterSpecOrBuilder() {
        if (filterSpecBuilder_ != null) {
          return filterSpecBuilder_.getMessageOrBuilder();
        } else {
          return filterSpec_;
        }
      }
      /**
       * <code>optional .pivottracingspec.FilterSpec filterSpec = 3;</code>
       *
       * <pre>
       * Unpack raw tuples with a filter applied
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder> 
          getFilterSpecFieldBuilder() {
        if (filterSpecBuilder_ == null) {
          filterSpecBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.FilterSpecOrBuilder>(
                  filterSpec_,
                  getParentForChildren(),
                  isClean());
          filterSpec_ = null;
        }
        return filterSpecBuilder_;
      }

      // optional .pivottracingspec.GroupBySpec groupBySpec = 4;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder> groupBySpecBuilder_;
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public boolean hasGroupBySpec() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec() {
        if (groupBySpecBuilder_ == null) {
          return groupBySpec_;
        } else {
          return groupBySpecBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public Builder setGroupBySpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec value) {
        if (groupBySpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupBySpec_ = value;
          onChanged();
        } else {
          groupBySpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public Builder setGroupBySpec(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder builderForValue) {
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = builderForValue.build();
          onChanged();
        } else {
          groupBySpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public Builder mergeGroupBySpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec value) {
        if (groupBySpecBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              groupBySpec_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance()) {
            groupBySpec_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.newBuilder(groupBySpec_).mergeFrom(value).buildPartial();
          } else {
            groupBySpec_ = value;
          }
          onChanged();
        } else {
          groupBySpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public Builder clearGroupBySpec() {
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
          onChanged();
        } else {
          groupBySpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder getGroupBySpecBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getGroupBySpecFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder() {
        if (groupBySpecBuilder_ != null) {
          return groupBySpecBuilder_.getMessageOrBuilder();
        } else {
          return groupBySpec_;
        }
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 4;</code>
       *
       * <pre>
       * Unpack grouped tuples with aggregations applied
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder> 
          getGroupBySpecFieldBuilder() {
        if (groupBySpecBuilder_ == null) {
          groupBySpecBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder>(
                  groupBySpec_,
                  getParentForChildren(),
                  isClean());
          groupBySpec_ = null;
        }
        return groupBySpecBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.PackSpec)
    }

    static {
      defaultInstance = new PackSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.PackSpec)
  }

  public interface EmitSpecOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bytes outputId = 1;
    /**
     * <code>required bytes outputId = 1;</code>
     *
     * <pre>
     * ID of the query output
     * </pre>
     */
    boolean hasOutputId();
    /**
     * <code>required bytes outputId = 1;</code>
     *
     * <pre>
     * ID of the query output
     * </pre>
     */
    com.google.protobuf.ByteString getOutputId();

    // optional .pivottracingspec.TupleSpec tupleSpec = 2;
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just output raw tuples
     * </pre>
     */
    boolean hasTupleSpec();
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just output raw tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec();
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just output raw tuples
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder();

    // optional .pivottracingspec.GroupBySpec groupBySpec = 3;
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
     *
     * <pre>
     * Output grouped tuples with aggregations applied
     * </pre>
     */
    boolean hasGroupBySpec();
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
     *
     * <pre>
     * Output grouped tuples with aggregations applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec();
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
     *
     * <pre>
     * Output grouped tuples with aggregations applied
     * </pre>
     */
    edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder();
  }
  /**
   * Protobuf type {@code pivottracingspec.EmitSpec}
   *
   * <pre>
   * Emits tuples for global aggregation 
   * </pre>
   */
  public static final class EmitSpec extends
      com.google.protobuf.GeneratedMessage
      implements EmitSpecOrBuilder {
    // Use EmitSpec.newBuilder() to construct.
    private EmitSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EmitSpec(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EmitSpec defaultInstance;
    public static EmitSpec getDefaultInstance() {
      return defaultInstance;
    }

    public EmitSpec getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EmitSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              outputId_ = input.readBytes();
              break;
            }
            case 18: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = tupleSpec_.toBuilder();
              }
              tupleSpec_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tupleSpec_);
                tupleSpec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = groupBySpec_.toBuilder();
              }
              groupBySpec_ = input.readMessage(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(groupBySpec_);
                groupBySpec_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_EmitSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_EmitSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.Builder.class);
    }

    public static com.google.protobuf.Parser<EmitSpec> PARSER =
        new com.google.protobuf.AbstractParser<EmitSpec>() {
      public EmitSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmitSpec(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EmitSpec> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes outputId = 1;
    public static final int OUTPUTID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString outputId_;
    /**
     * <code>required bytes outputId = 1;</code>
     *
     * <pre>
     * ID of the query output
     * </pre>
     */
    public boolean hasOutputId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes outputId = 1;</code>
     *
     * <pre>
     * ID of the query output
     * </pre>
     */
    public com.google.protobuf.ByteString getOutputId() {
      return outputId_;
    }

    // optional .pivottracingspec.TupleSpec tupleSpec = 2;
    public static final int TUPLESPEC_FIELD_NUMBER = 2;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec tupleSpec_;
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just output raw tuples
     * </pre>
     */
    public boolean hasTupleSpec() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just output raw tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec() {
      return tupleSpec_;
    }
    /**
     * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
     *
     * <pre>
     * Just output raw tuples
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder() {
      return tupleSpec_;
    }

    // optional .pivottracingspec.GroupBySpec groupBySpec = 3;
    public static final int GROUPBYSPEC_FIELD_NUMBER = 3;
    private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec groupBySpec_;
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
     *
     * <pre>
     * Output grouped tuples with aggregations applied
     * </pre>
     */
    public boolean hasGroupBySpec() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
     *
     * <pre>
     * Output grouped tuples with aggregations applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec() {
      return groupBySpec_;
    }
    /**
     * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
     *
     * <pre>
     * Output grouped tuples with aggregations applied
     * </pre>
     */
    public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder() {
      return groupBySpec_;
    }

    private void initFields() {
      outputId_ = com.google.protobuf.ByteString.EMPTY;
      tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
      groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasOutputId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasGroupBySpec()) {
        if (!getGroupBySpec().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, outputId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, tupleSpec_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, groupBySpec_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, outputId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, tupleSpec_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, groupBySpec_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pivottracingspec.EmitSpec}
     *
     * <pre>
     * Emits tuples for global aggregation 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_EmitSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_EmitSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.class, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.Builder.class);
      }

      // Construct using edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTupleSpecFieldBuilder();
          getGroupBySpecFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        outputId_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
        } else {
          tupleSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
        } else {
          groupBySpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.internal_static_pivottracingspec_EmitSpec_descriptor;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec getDefaultInstanceForType() {
        return edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.getDefaultInstance();
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec build() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec buildPartial() {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec result = new edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outputId_ = outputId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (tupleSpecBuilder_ == null) {
          result.tupleSpec_ = tupleSpec_;
        } else {
          result.tupleSpec_ = tupleSpecBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (groupBySpecBuilder_ == null) {
          result.groupBySpec_ = groupBySpec_;
        } else {
          result.groupBySpec_ = groupBySpecBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec) {
          return mergeFrom((edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec other) {
        if (other == edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec.getDefaultInstance()) return this;
        if (other.hasOutputId()) {
          setOutputId(other.getOutputId());
        }
        if (other.hasTupleSpec()) {
          mergeTupleSpec(other.getTupleSpec());
        }
        if (other.hasGroupBySpec()) {
          mergeGroupBySpec(other.getGroupBySpec());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasOutputId()) {
          
          return false;
        }
        if (hasGroupBySpec()) {
          if (!getGroupBySpec().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.pivottracing.advice.AdviceProtos.EmitSpec) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes outputId = 1;
      private com.google.protobuf.ByteString outputId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes outputId = 1;</code>
       *
       * <pre>
       * ID of the query output
       * </pre>
       */
      public boolean hasOutputId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes outputId = 1;</code>
       *
       * <pre>
       * ID of the query output
       * </pre>
       */
      public com.google.protobuf.ByteString getOutputId() {
        return outputId_;
      }
      /**
       * <code>required bytes outputId = 1;</code>
       *
       * <pre>
       * ID of the query output
       * </pre>
       */
      public Builder setOutputId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        outputId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes outputId = 1;</code>
       *
       * <pre>
       * ID of the query output
       * </pre>
       */
      public Builder clearOutputId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outputId_ = getDefaultInstance().getOutputId();
        onChanged();
        return this;
      }

      // optional .pivottracingspec.TupleSpec tupleSpec = 2;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder> tupleSpecBuilder_;
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      public boolean hasTupleSpec() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec getTupleSpec() {
        if (tupleSpecBuilder_ == null) {
          return tupleSpec_;
        } else {
          return tupleSpecBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      public Builder setTupleSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec value) {
        if (tupleSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tupleSpec_ = value;
          onChanged();
        } else {
          tupleSpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      public Builder setTupleSpec(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder builderForValue) {
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = builderForValue.build();
          onChanged();
        } else {
          tupleSpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      public Builder mergeTupleSpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec value) {
        if (tupleSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              tupleSpec_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance()) {
            tupleSpec_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.newBuilder(tupleSpec_).mergeFrom(value).buildPartial();
          } else {
            tupleSpec_ = value;
          }
          onChanged();
        } else {
          tupleSpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      public Builder clearTupleSpec() {
        if (tupleSpecBuilder_ == null) {
          tupleSpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.getDefaultInstance();
          onChanged();
        } else {
          tupleSpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder getTupleSpecBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTupleSpecFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder getTupleSpecOrBuilder() {
        if (tupleSpecBuilder_ != null) {
          return tupleSpecBuilder_.getMessageOrBuilder();
        } else {
          return tupleSpec_;
        }
      }
      /**
       * <code>optional .pivottracingspec.TupleSpec tupleSpec = 2;</code>
       *
       * <pre>
       * Just output raw tuples
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder> 
          getTupleSpecFieldBuilder() {
        if (tupleSpecBuilder_ == null) {
          tupleSpecBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.TupleSpecOrBuilder>(
                  tupleSpec_,
                  getParentForChildren(),
                  isClean());
          tupleSpec_ = null;
        }
        return tupleSpecBuilder_;
      }

      // optional .pivottracingspec.GroupBySpec groupBySpec = 3;
      private edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder> groupBySpecBuilder_;
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      public boolean hasGroupBySpec() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec getGroupBySpec() {
        if (groupBySpecBuilder_ == null) {
          return groupBySpec_;
        } else {
          return groupBySpecBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      public Builder setGroupBySpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec value) {
        if (groupBySpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          groupBySpec_ = value;
          onChanged();
        } else {
          groupBySpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      public Builder setGroupBySpec(
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder builderForValue) {
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = builderForValue.build();
          onChanged();
        } else {
          groupBySpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      public Builder mergeGroupBySpec(edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec value) {
        if (groupBySpecBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              groupBySpec_ != edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance()) {
            groupBySpec_ =
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.newBuilder(groupBySpec_).mergeFrom(value).buildPartial();
          } else {
            groupBySpec_ = value;
          }
          onChanged();
        } else {
          groupBySpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      public Builder clearGroupBySpec() {
        if (groupBySpecBuilder_ == null) {
          groupBySpec_ = edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.getDefaultInstance();
          onChanged();
        } else {
          groupBySpecBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder getGroupBySpecBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getGroupBySpecFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      public edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder getGroupBySpecOrBuilder() {
        if (groupBySpecBuilder_ != null) {
          return groupBySpecBuilder_.getMessageOrBuilder();
        } else {
          return groupBySpec_;
        }
      }
      /**
       * <code>optional .pivottracingspec.GroupBySpec groupBySpec = 3;</code>
       *
       * <pre>
       * Output grouped tuples with aggregations applied
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder> 
          getGroupBySpecFieldBuilder() {
        if (groupBySpecBuilder_ == null) {
          groupBySpecBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpec.Builder, edu.brown.cs.systems.pivottracing.advice.AdviceProtos.GroupBySpecOrBuilder>(
                  groupBySpec_,
                  getParentForChildren(),
                  isClean());
          groupBySpec_ = null;
        }
        return groupBySpecBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pivottracingspec.EmitSpec)
    }

    static {
      defaultInstance = new EmitSpec(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:pivottracingspec.EmitSpec)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_AggVar_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_AggVar_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_TupleSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_TupleSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_FilterSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_FilterSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_GroupBySpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_GroupBySpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_AdviceSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_AdviceSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_ObserveSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_ObserveSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_UnpackSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_UnpackSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_LetSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_LetSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_WhereSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_WhereSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_PackSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_PackSpec_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pivottracingspec_EmitSpec_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pivottracingspec_EmitSpec_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\036src/main/protobuf/Advice.proto\022\020pivott" +
      "racingspec\":\n\006AggVar\022\014\n\004name\030\001 \002(\t\022\"\n\003ho" +
      "w\030\002 \002(\0162\025.pivottracingspec.Agg\"\030\n\tTupleS" +
      "pec\022\013\n\003var\030\001 \003(\t\"C\n\nFilterSpec\022(\n\006filter" +
      "\030\001 \002(\0162\030.pivottracingspec.Filter\022\013\n\003var\030" +
      "\002 \003(\t\"K\n\013GroupBySpec\022\017\n\007groupBy\030\001 \003(\t\022+\n" +
      "\taggregate\030\002 \003(\0132\030.pivottracingspec.AggV" +
      "ar\"\222\002\n\nAdviceSpec\022.\n\007observe\030\002 \002(\0132\035.piv" +
      "ottracingspec.ObserveSpec\022,\n\006unpack\030\003 \003(" +
      "\0132\034.pivottracingspec.UnpackSpec\022&\n\003let\030\004",
      " \003(\0132\031.pivottracingspec.LetSpec\022*\n\005where" +
      "\030\005 \003(\0132\033.pivottracingspec.WhereSpec\022(\n\004p" +
      "ack\030\006 \001(\0132\032.pivottracingspec.PackSpec\022(\n" +
      "\004emit\030\007 \001(\0132\032.pivottracingspec.EmitSpec\"" +
      "\032\n\013ObserveSpec\022\013\n\003var\030\001 \003(\t\"\261\001\n\nUnpackSp" +
      "ec\022\r\n\005bagId\030\001 \002(\014\022.\n\ttupleSpec\030\002 \001(\0132\033.p" +
      "ivottracingspec.TupleSpec\0220\n\nfilterSpec\030" +
      "\003 \001(\0132\034.pivottracingspec.FilterSpec\0222\n\013g" +
      "roupBySpec\030\004 \001(\0132\035.pivottracingspec.Grou" +
      "pBySpec\"H\n\007LetSpec\022\013\n\003var\030\001 \002(\t\022\022\n\nexpre",
      "ssion\030\002 \002(\t\022\034\n\024replacementVariables\030\003 \003(" +
      "\t\"<\n\tWhereSpec\022\021\n\tpredicate\030\001 \002(\t\022\034\n\024rep" +
      "lacementVariables\030\002 \003(\t\"\257\001\n\010PackSpec\022\r\n\005" +
      "bagId\030\001 \002(\014\022.\n\ttupleSpec\030\002 \001(\0132\033.pivottr" +
      "acingspec.TupleSpec\0220\n\nfilterSpec\030\003 \001(\0132" +
      "\034.pivottracingspec.FilterSpec\0222\n\013groupBy" +
      "Spec\030\004 \001(\0132\035.pivottracingspec.GroupBySpe" +
      "c\"\200\001\n\010EmitSpec\022\020\n\010outputId\030\001 \002(\014\022.\n\ttupl" +
      "eSpec\030\002 \001(\0132\033.pivottracingspec.TupleSpec" +
      "\0222\n\013groupBySpec\030\003 \001(\0132\035.pivottracingspec",
      ".GroupBySpec*+\n\003Agg\022\007\n\003SUM\020\002\022\t\n\005COUNT\020\003\022" +
      "\007\n\003MIN\020\004\022\007\n\003MAX\020\005*#\n\006Filter\022\t\n\005FIRST\020\002\022\016" +
      "\n\nMOSTRECENT\020\003B8\n(edu.brown.cs.systems.p" +
      "ivottracing.adviceB\014AdviceProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_pivottracingspec_AggVar_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_pivottracingspec_AggVar_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_AggVar_descriptor,
              new java.lang.String[] { "Name", "How", });
          internal_static_pivottracingspec_TupleSpec_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_pivottracingspec_TupleSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_TupleSpec_descriptor,
              new java.lang.String[] { "Var", });
          internal_static_pivottracingspec_FilterSpec_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_pivottracingspec_FilterSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_FilterSpec_descriptor,
              new java.lang.String[] { "Filter", "Var", });
          internal_static_pivottracingspec_GroupBySpec_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_pivottracingspec_GroupBySpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_GroupBySpec_descriptor,
              new java.lang.String[] { "GroupBy", "Aggregate", });
          internal_static_pivottracingspec_AdviceSpec_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_pivottracingspec_AdviceSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_AdviceSpec_descriptor,
              new java.lang.String[] { "Observe", "Unpack", "Let", "Where", "Pack", "Emit", });
          internal_static_pivottracingspec_ObserveSpec_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_pivottracingspec_ObserveSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_ObserveSpec_descriptor,
              new java.lang.String[] { "Var", });
          internal_static_pivottracingspec_UnpackSpec_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_pivottracingspec_UnpackSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_UnpackSpec_descriptor,
              new java.lang.String[] { "BagId", "TupleSpec", "FilterSpec", "GroupBySpec", });
          internal_static_pivottracingspec_LetSpec_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_pivottracingspec_LetSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_LetSpec_descriptor,
              new java.lang.String[] { "Var", "Expression", "ReplacementVariables", });
          internal_static_pivottracingspec_WhereSpec_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_pivottracingspec_WhereSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_WhereSpec_descriptor,
              new java.lang.String[] { "Predicate", "ReplacementVariables", });
          internal_static_pivottracingspec_PackSpec_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_pivottracingspec_PackSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_PackSpec_descriptor,
              new java.lang.String[] { "BagId", "TupleSpec", "FilterSpec", "GroupBySpec", });
          internal_static_pivottracingspec_EmitSpec_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_pivottracingspec_EmitSpec_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_pivottracingspec_EmitSpec_descriptor,
              new java.lang.String[] { "OutputId", "TupleSpec", "GroupBySpec", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
