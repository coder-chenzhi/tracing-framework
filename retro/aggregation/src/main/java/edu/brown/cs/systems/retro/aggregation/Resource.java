// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/Resource.proto

package edu.brown.cs.systems.retro.aggregation;

public final class Resource {
  private Resource() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code pubsub.Operation}
   */
  public enum Operation
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>READ = 1;</code>
     *
     * <pre>
     * disk, network, hdfs, locks - also used as default operation for resources with no notion of an operation
     * </pre>
     */
    READ(0, 1),
    /**
     * <code>WRITE = 2;</code>
     *
     * <pre>
     * disk, network, hdfs, locks
     * </pre>
     */
    WRITE(1, 2),
    /**
     * <code>OPEN = 3;</code>
     *
     * <pre>
     * disk
     * </pre>
     */
    OPEN(2, 3),
    /**
     * <code>CLOSE = 4;</code>
     *
     * <pre>
     * disk, network
     * </pre>
     */
    CLOSE(3, 4),
    /**
     * <code>FLUSH = 5;</code>
     *
     * <pre>
     * disk, network
     * </pre>
     */
    FLUSH(4, 5),
    /**
     * <code>SYNC = 6;</code>
     *
     * <pre>
     * disk
     * </pre>
     */
    SYNC(5, 6),
    /**
     * <code>CONNECT = 7;</code>
     *
     * <pre>
     * network
     * </pre>
     */
    CONNECT(6, 7),
    /**
     * <code>FOREGROUND = 8;</code>
     *
     * <pre>
     * CPU usage from tenant from actual processing
     * </pre>
     */
    FOREGROUND(7, 8),
    /**
     * <code>BACKGROUND = 9;</code>
     *
     * <pre>
     * CPU usage while consuming some other resource (eg. disk)
     * </pre>
     */
    BACKGROUND(8, 9),
    /**
     * <code>DELETE = 10;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    DELETE(9, 10),
    /**
     * <code>RENAME = 11;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    RENAME(10, 11),
    /**
     * <code>LIST_LOCATED_FILES = 12;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    LIST_LOCATED_FILES(11, 12),
    /**
     * <code>LIST_FILES = 13;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    LIST_FILES(12, 13),
    /**
     * <code>MKDIR = 14;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    MKDIR(13, 14),
    /**
     * <code>CREATE_SYMLINK = 15;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    CREATE_SYMLINK(14, 15),
    /**
     * <code>REPLICATION = 30;</code>
     *
     * <pre>
     * hdfs background task, block replication
     * </pre>
     */
    REPLICATION(15, 30),
    /**
     * <code>HEARTBEAT = 31;</code>
     *
     * <pre>
     * hdfs background task, DN&lt;-&gt;NN heartbeat
     * </pre>
     */
    HEARTBEAT(16, 31),
    /**
     * <code>INVALIDATE = 33;</code>
     *
     * <pre>
     * hdfs background task, DN invalidate a block
     * </pre>
     */
    INVALIDATE(17, 33),
    /**
     * <code>FINALIZE = 34;</code>
     *
     * <pre>
     * hdfs background task, DN finalize a block
     * </pre>
     */
    FINALIZE(18, 34),
    /**
     * <code>RECOVER = 35;</code>
     *
     * <pre>
     * hdfs background task, DN recover a block
     * </pre>
     */
    RECOVER(19, 35),
    /**
     * <code>METADATA = 36;</code>
     *
     * <pre>
     * disk metadata operation eg. exists(), delete()
     * </pre>
     */
    METADATA(20, 36),
    /**
     * <code>SEEK = 37;</code>
     *
     * <pre>
     * disk seek meta-operation
     * </pre>
     */
    SEEK(21, 37),
    ;

    /**
     * <code>READ = 1;</code>
     *
     * <pre>
     * disk, network, hdfs, locks - also used as default operation for resources with no notion of an operation
     * </pre>
     */
    public static final int READ_VALUE = 1;
    /**
     * <code>WRITE = 2;</code>
     *
     * <pre>
     * disk, network, hdfs, locks
     * </pre>
     */
    public static final int WRITE_VALUE = 2;
    /**
     * <code>OPEN = 3;</code>
     *
     * <pre>
     * disk
     * </pre>
     */
    public static final int OPEN_VALUE = 3;
    /**
     * <code>CLOSE = 4;</code>
     *
     * <pre>
     * disk, network
     * </pre>
     */
    public static final int CLOSE_VALUE = 4;
    /**
     * <code>FLUSH = 5;</code>
     *
     * <pre>
     * disk, network
     * </pre>
     */
    public static final int FLUSH_VALUE = 5;
    /**
     * <code>SYNC = 6;</code>
     *
     * <pre>
     * disk
     * </pre>
     */
    public static final int SYNC_VALUE = 6;
    /**
     * <code>CONNECT = 7;</code>
     *
     * <pre>
     * network
     * </pre>
     */
    public static final int CONNECT_VALUE = 7;
    /**
     * <code>FOREGROUND = 8;</code>
     *
     * <pre>
     * CPU usage from tenant from actual processing
     * </pre>
     */
    public static final int FOREGROUND_VALUE = 8;
    /**
     * <code>BACKGROUND = 9;</code>
     *
     * <pre>
     * CPU usage while consuming some other resource (eg. disk)
     * </pre>
     */
    public static final int BACKGROUND_VALUE = 9;
    /**
     * <code>DELETE = 10;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    public static final int DELETE_VALUE = 10;
    /**
     * <code>RENAME = 11;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    public static final int RENAME_VALUE = 11;
    /**
     * <code>LIST_LOCATED_FILES = 12;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    public static final int LIST_LOCATED_FILES_VALUE = 12;
    /**
     * <code>LIST_FILES = 13;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    public static final int LIST_FILES_VALUE = 13;
    /**
     * <code>MKDIR = 14;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    public static final int MKDIR_VALUE = 14;
    /**
     * <code>CREATE_SYMLINK = 15;</code>
     *
     * <pre>
     * hdfs
     * </pre>
     */
    public static final int CREATE_SYMLINK_VALUE = 15;
    /**
     * <code>REPLICATION = 30;</code>
     *
     * <pre>
     * hdfs background task, block replication
     * </pre>
     */
    public static final int REPLICATION_VALUE = 30;
    /**
     * <code>HEARTBEAT = 31;</code>
     *
     * <pre>
     * hdfs background task, DN&lt;-&gt;NN heartbeat
     * </pre>
     */
    public static final int HEARTBEAT_VALUE = 31;
    /**
     * <code>INVALIDATE = 33;</code>
     *
     * <pre>
     * hdfs background task, DN invalidate a block
     * </pre>
     */
    public static final int INVALIDATE_VALUE = 33;
    /**
     * <code>FINALIZE = 34;</code>
     *
     * <pre>
     * hdfs background task, DN finalize a block
     * </pre>
     */
    public static final int FINALIZE_VALUE = 34;
    /**
     * <code>RECOVER = 35;</code>
     *
     * <pre>
     * hdfs background task, DN recover a block
     * </pre>
     */
    public static final int RECOVER_VALUE = 35;
    /**
     * <code>METADATA = 36;</code>
     *
     * <pre>
     * disk metadata operation eg. exists(), delete()
     * </pre>
     */
    public static final int METADATA_VALUE = 36;
    /**
     * <code>SEEK = 37;</code>
     *
     * <pre>
     * disk seek meta-operation
     * </pre>
     */
    public static final int SEEK_VALUE = 37;


    public final int getNumber() { return value; }

    public static Operation valueOf(int value) {
      switch (value) {
        case 1: return READ;
        case 2: return WRITE;
        case 3: return OPEN;
        case 4: return CLOSE;
        case 5: return FLUSH;
        case 6: return SYNC;
        case 7: return CONNECT;
        case 8: return FOREGROUND;
        case 9: return BACKGROUND;
        case 10: return DELETE;
        case 11: return RENAME;
        case 12: return LIST_LOCATED_FILES;
        case 13: return LIST_FILES;
        case 14: return MKDIR;
        case 15: return CREATE_SYMLINK;
        case 30: return REPLICATION;
        case 31: return HEARTBEAT;
        case 33: return INVALIDATE;
        case 34: return FINALIZE;
        case 35: return RECOVER;
        case 36: return METADATA;
        case 37: return SEEK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Operation>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Operation>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Operation>() {
            public Operation findValueByNumber(int number) {
              return Operation.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return edu.brown.cs.systems.retro.aggregation.Resource.getDescriptor().getEnumTypes().get(0);
    }

    private static final Operation[] VALUES = values();

    public static Operation valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Operation(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pubsub.Operation)
  }

  /**
   * Protobuf enum {@code pubsub.Type}
   */
  public enum Type
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DISK = 0;</code>
     */
    DISK(0, 0),
    /**
     * <code>NETWORK = 1;</code>
     */
    NETWORK(1, 1),
    /**
     * <code>LOCKING = 2;</code>
     */
    LOCKING(2, 2),
    /**
     * <code>THREAD = 3;</code>
     */
    THREAD(3, 3),
    /**
     * <code>CPU = 4;</code>
     */
    CPU(4, 4),
    /**
     * <code>HDFSREQUEST = 5;</code>
     *
     * <pre>
     * deprecated; use CLIENT
     * </pre>
     */
    HDFSREQUEST(5, 5),
    /**
     * <code>QUEUE = 6;</code>
     */
    QUEUE(6, 6),
    /**
     * <code>DISKCACHE = 7;</code>
     */
    DISKCACHE(7, 7),
    /**
     * <code>UPLINK = 8;</code>
     *
     * <pre>
     * deprecated; use NETWORK type and specify uplink as resource id
     * </pre>
     */
    UPLINK(8, 8),
    /**
     * <code>DOWNLINK = 9;</code>
     *
     * <pre>
     * deprecated; use NETWORK type and specify downlink as resource id
     * </pre>
     */
    DOWNLINK(9, 9),
    /**
     * <code>HDFSBACKGROUND = 10;</code>
     *
     * <pre>
     * deprecated; use CLIENT
     * </pre>
     */
    HDFSBACKGROUND(10, 10),
    /**
     * <code>THROTTLINGPOINT = 11;</code>
     *
     * <pre>
     * a throttling point
     * </pre>
     */
    THROTTLINGPOINT(11, 11),
    /**
     * <code>CLIENT = 12;</code>
     *
     * <pre>
     * a generic client request
     * </pre>
     */
    CLIENT(12, 12),
    /**
     * <code>BATCH = 13;</code>
     */
    BATCH(13, 13),
    /**
     * <code>SCHEDULER = 14;</code>
     */
    SCHEDULER(14, 14),
    ;

    /**
     * <code>DISK = 0;</code>
     */
    public static final int DISK_VALUE = 0;
    /**
     * <code>NETWORK = 1;</code>
     */
    public static final int NETWORK_VALUE = 1;
    /**
     * <code>LOCKING = 2;</code>
     */
    public static final int LOCKING_VALUE = 2;
    /**
     * <code>THREAD = 3;</code>
     */
    public static final int THREAD_VALUE = 3;
    /**
     * <code>CPU = 4;</code>
     */
    public static final int CPU_VALUE = 4;
    /**
     * <code>HDFSREQUEST = 5;</code>
     *
     * <pre>
     * deprecated; use CLIENT
     * </pre>
     */
    public static final int HDFSREQUEST_VALUE = 5;
    /**
     * <code>QUEUE = 6;</code>
     */
    public static final int QUEUE_VALUE = 6;
    /**
     * <code>DISKCACHE = 7;</code>
     */
    public static final int DISKCACHE_VALUE = 7;
    /**
     * <code>UPLINK = 8;</code>
     *
     * <pre>
     * deprecated; use NETWORK type and specify uplink as resource id
     * </pre>
     */
    public static final int UPLINK_VALUE = 8;
    /**
     * <code>DOWNLINK = 9;</code>
     *
     * <pre>
     * deprecated; use NETWORK type and specify downlink as resource id
     * </pre>
     */
    public static final int DOWNLINK_VALUE = 9;
    /**
     * <code>HDFSBACKGROUND = 10;</code>
     *
     * <pre>
     * deprecated; use CLIENT
     * </pre>
     */
    public static final int HDFSBACKGROUND_VALUE = 10;
    /**
     * <code>THROTTLINGPOINT = 11;</code>
     *
     * <pre>
     * a throttling point
     * </pre>
     */
    public static final int THROTTLINGPOINT_VALUE = 11;
    /**
     * <code>CLIENT = 12;</code>
     *
     * <pre>
     * a generic client request
     * </pre>
     */
    public static final int CLIENT_VALUE = 12;
    /**
     * <code>BATCH = 13;</code>
     */
    public static final int BATCH_VALUE = 13;
    /**
     * <code>SCHEDULER = 14;</code>
     */
    public static final int SCHEDULER_VALUE = 14;


    public final int getNumber() { return value; }

    public static Type valueOf(int value) {
      switch (value) {
        case 0: return DISK;
        case 1: return NETWORK;
        case 2: return LOCKING;
        case 3: return THREAD;
        case 4: return CPU;
        case 5: return HDFSREQUEST;
        case 6: return QUEUE;
        case 7: return DISKCACHE;
        case 8: return UPLINK;
        case 9: return DOWNLINK;
        case 10: return HDFSBACKGROUND;
        case 11: return THROTTLINGPOINT;
        case 12: return CLIENT;
        case 13: return BATCH;
        case 14: return SCHEDULER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return edu.brown.cs.systems.retro.aggregation.Resource.getDescriptor().getEnumTypes().get(1);
    }

    private static final Type[] VALUES = values();

    public static Type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Type(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pubsub.Type)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n src/main/protobuf/Resource.proto\022\006pubs" +
      "ub*\271\002\n\tOperation\022\010\n\004READ\020\001\022\t\n\005WRITE\020\002\022\010\n" +
      "\004OPEN\020\003\022\t\n\005CLOSE\020\004\022\t\n\005FLUSH\020\005\022\010\n\004SYNC\020\006\022" +
      "\013\n\007CONNECT\020\007\022\016\n\nFOREGROUND\020\010\022\016\n\nBACKGROU" +
      "ND\020\t\022\n\n\006DELETE\020\n\022\n\n\006RENAME\020\013\022\026\n\022LIST_LOC" +
      "ATED_FILES\020\014\022\016\n\nLIST_FILES\020\r\022\t\n\005MKDIR\020\016\022" +
      "\022\n\016CREATE_SYMLINK\020\017\022\017\n\013REPLICATION\020\036\022\r\n\t" +
      "HEARTBEAT\020\037\022\016\n\nINVALIDATE\020!\022\014\n\010FINALIZE\020" +
      "\"\022\013\n\007RECOVER\020#\022\014\n\010METADATA\020$\022\010\n\004SEEK\020%*\323" +
      "\001\n\004Type\022\010\n\004DISK\020\000\022\013\n\007NETWORK\020\001\022\013\n\007LOCKIN",
      "G\020\002\022\n\n\006THREAD\020\003\022\007\n\003CPU\020\004\022\017\n\013HDFSREQUEST\020" +
      "\005\022\t\n\005QUEUE\020\006\022\r\n\tDISKCACHE\020\007\022\n\n\006UPLINK\020\010\022" +
      "\014\n\010DOWNLINK\020\t\022\022\n\016HDFSBACKGROUND\020\n\022\023\n\017THR" +
      "OTTLINGPOINT\020\013\022\n\n\006CLIENT\020\014\022\t\n\005BATCH\020\r\022\r\n" +
      "\tSCHEDULER\020\016B2\n&edu.brown.cs.systems.ret" +
      "ro.aggregationB\010Resource"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
