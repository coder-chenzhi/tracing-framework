// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/protobuf/ThrottlingMessages.proto

package edu.brown.cs.systems.resourcethrottling;

public final class ThrottlingMessages {
  private ThrottlingMessages() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ThrottlingPointSpecificationOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated uint32 tenantID = 1;
    /**
     * <code>repeated uint32 tenantID = 1;</code>
     *
     * <pre>
     * Tenant IDs with throttling rates
     * </pre>
     */
    java.util.List<java.lang.Integer> getTenantIDList();
    /**
     * <code>repeated uint32 tenantID = 1;</code>
     *
     * <pre>
     * Tenant IDs with throttling rates
     * </pre>
     */
    int getTenantIDCount();
    /**
     * <code>repeated uint32 tenantID = 1;</code>
     *
     * <pre>
     * Tenant IDs with throttling rates
     * </pre>
     */
    int getTenantID(int index);

    // repeated double throttlingRate = 2;
    /**
     * <code>repeated double throttlingRate = 2;</code>
     *
     * <pre>
     * Target rate for corresponding tenant.  
     * </pre>
     */
    java.util.List<java.lang.Double> getThrottlingRateList();
    /**
     * <code>repeated double throttlingRate = 2;</code>
     *
     * <pre>
     * Target rate for corresponding tenant.  
     * </pre>
     */
    int getThrottlingRateCount();
    /**
     * <code>repeated double throttlingRate = 2;</code>
     *
     * <pre>
     * Target rate for corresponding tenant.  
     * </pre>
     */
    double getThrottlingRate(int index);

    // optional double defaultThrottlingRate = 3;
    /**
     * <code>optional double defaultThrottlingRate = 3;</code>
     *
     * <pre>
     * Default throttling rate for tenants not throttled
     * </pre>
     */
    boolean hasDefaultThrottlingRate();
    /**
     * <code>optional double defaultThrottlingRate = 3;</code>
     *
     * <pre>
     * Default throttling rate for tenants not throttled
     * </pre>
     */
    double getDefaultThrottlingRate();
  }
  /**
   * Protobuf type {@code resourcethrottling.ThrottlingPointSpecification}
   *
   * <pre>
   * Just sets the throttling rate for each tenant 
   * </pre>
   */
  public static final class ThrottlingPointSpecification extends
      com.google.protobuf.GeneratedMessage
      implements ThrottlingPointSpecificationOrBuilder {
    // Use ThrottlingPointSpecification.newBuilder() to construct.
    private ThrottlingPointSpecification(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ThrottlingPointSpecification(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ThrottlingPointSpecification defaultInstance;
    public static ThrottlingPointSpecification getDefaultInstance() {
      return defaultInstance;
    }

    public ThrottlingPointSpecification getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ThrottlingPointSpecification(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                tenantID_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              tenantID_.add(input.readUInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                tenantID_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                tenantID_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                throttlingRate_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              throttlingRate_.add(input.readDouble());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                throttlingRate_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                throttlingRate_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 25: {
              bitField0_ |= 0x00000001;
              defaultThrottlingRate_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          tenantID_ = java.util.Collections.unmodifiableList(tenantID_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          throttlingRate_ = java.util.Collections.unmodifiableList(throttlingRate_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingPointSpecification_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingPointSpecification_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.class, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder.class);
    }

    public static com.google.protobuf.Parser<ThrottlingPointSpecification> PARSER =
        new com.google.protobuf.AbstractParser<ThrottlingPointSpecification>() {
      public ThrottlingPointSpecification parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ThrottlingPointSpecification(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ThrottlingPointSpecification> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated uint32 tenantID = 1;
    public static final int TENANTID_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> tenantID_;
    /**
     * <code>repeated uint32 tenantID = 1;</code>
     *
     * <pre>
     * Tenant IDs with throttling rates
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTenantIDList() {
      return tenantID_;
    }
    /**
     * <code>repeated uint32 tenantID = 1;</code>
     *
     * <pre>
     * Tenant IDs with throttling rates
     * </pre>
     */
    public int getTenantIDCount() {
      return tenantID_.size();
    }
    /**
     * <code>repeated uint32 tenantID = 1;</code>
     *
     * <pre>
     * Tenant IDs with throttling rates
     * </pre>
     */
    public int getTenantID(int index) {
      return tenantID_.get(index);
    }

    // repeated double throttlingRate = 2;
    public static final int THROTTLINGRATE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Double> throttlingRate_;
    /**
     * <code>repeated double throttlingRate = 2;</code>
     *
     * <pre>
     * Target rate for corresponding tenant.  
     * </pre>
     */
    public java.util.List<java.lang.Double>
        getThrottlingRateList() {
      return throttlingRate_;
    }
    /**
     * <code>repeated double throttlingRate = 2;</code>
     *
     * <pre>
     * Target rate for corresponding tenant.  
     * </pre>
     */
    public int getThrottlingRateCount() {
      return throttlingRate_.size();
    }
    /**
     * <code>repeated double throttlingRate = 2;</code>
     *
     * <pre>
     * Target rate for corresponding tenant.  
     * </pre>
     */
    public double getThrottlingRate(int index) {
      return throttlingRate_.get(index);
    }

    // optional double defaultThrottlingRate = 3;
    public static final int DEFAULTTHROTTLINGRATE_FIELD_NUMBER = 3;
    private double defaultThrottlingRate_;
    /**
     * <code>optional double defaultThrottlingRate = 3;</code>
     *
     * <pre>
     * Default throttling rate for tenants not throttled
     * </pre>
     */
    public boolean hasDefaultThrottlingRate() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double defaultThrottlingRate = 3;</code>
     *
     * <pre>
     * Default throttling rate for tenants not throttled
     * </pre>
     */
    public double getDefaultThrottlingRate() {
      return defaultThrottlingRate_;
    }

    private void initFields() {
      tenantID_ = java.util.Collections.emptyList();
      throttlingRate_ = java.util.Collections.emptyList();
      defaultThrottlingRate_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < tenantID_.size(); i++) {
        output.writeUInt32(1, tenantID_.get(i));
      }
      for (int i = 0; i < throttlingRate_.size(); i++) {
        output.writeDouble(2, throttlingRate_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(3, defaultThrottlingRate_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < tenantID_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(tenantID_.get(i));
        }
        size += dataSize;
        size += 1 * getTenantIDList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getThrottlingRateList().size();
        size += dataSize;
        size += 1 * getThrottlingRateList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, defaultThrottlingRate_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code resourcethrottling.ThrottlingPointSpecification}
     *
     * <pre>
     * Just sets the throttling rate for each tenant 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingPointSpecification_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingPointSpecification_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.class, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder.class);
      }

      // Construct using edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tenantID_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        throttlingRate_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        defaultThrottlingRate_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingPointSpecification_descriptor;
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification getDefaultInstanceForType() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification build() {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification buildPartial() {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification result = new edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          tenantID_ = java.util.Collections.unmodifiableList(tenantID_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.tenantID_ = tenantID_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          throttlingRate_ = java.util.Collections.unmodifiableList(throttlingRate_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.throttlingRate_ = throttlingRate_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.defaultThrottlingRate_ = defaultThrottlingRate_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification) {
          return mergeFrom((edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification other) {
        if (other == edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance()) return this;
        if (!other.tenantID_.isEmpty()) {
          if (tenantID_.isEmpty()) {
            tenantID_ = other.tenantID_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTenantIDIsMutable();
            tenantID_.addAll(other.tenantID_);
          }
          onChanged();
        }
        if (!other.throttlingRate_.isEmpty()) {
          if (throttlingRate_.isEmpty()) {
            throttlingRate_ = other.throttlingRate_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureThrottlingRateIsMutable();
            throttlingRate_.addAll(other.throttlingRate_);
          }
          onChanged();
        }
        if (other.hasDefaultThrottlingRate()) {
          setDefaultThrottlingRate(other.getDefaultThrottlingRate());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated uint32 tenantID = 1;
      private java.util.List<java.lang.Integer> tenantID_ = java.util.Collections.emptyList();
      private void ensureTenantIDIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          tenantID_ = new java.util.ArrayList<java.lang.Integer>(tenantID_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated uint32 tenantID = 1;</code>
       *
       * <pre>
       * Tenant IDs with throttling rates
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTenantIDList() {
        return java.util.Collections.unmodifiableList(tenantID_);
      }
      /**
       * <code>repeated uint32 tenantID = 1;</code>
       *
       * <pre>
       * Tenant IDs with throttling rates
       * </pre>
       */
      public int getTenantIDCount() {
        return tenantID_.size();
      }
      /**
       * <code>repeated uint32 tenantID = 1;</code>
       *
       * <pre>
       * Tenant IDs with throttling rates
       * </pre>
       */
      public int getTenantID(int index) {
        return tenantID_.get(index);
      }
      /**
       * <code>repeated uint32 tenantID = 1;</code>
       *
       * <pre>
       * Tenant IDs with throttling rates
       * </pre>
       */
      public Builder setTenantID(
          int index, int value) {
        ensureTenantIDIsMutable();
        tenantID_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tenantID = 1;</code>
       *
       * <pre>
       * Tenant IDs with throttling rates
       * </pre>
       */
      public Builder addTenantID(int value) {
        ensureTenantIDIsMutable();
        tenantID_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tenantID = 1;</code>
       *
       * <pre>
       * Tenant IDs with throttling rates
       * </pre>
       */
      public Builder addAllTenantID(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTenantIDIsMutable();
        super.addAll(values, tenantID_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 tenantID = 1;</code>
       *
       * <pre>
       * Tenant IDs with throttling rates
       * </pre>
       */
      public Builder clearTenantID() {
        tenantID_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated double throttlingRate = 2;
      private java.util.List<java.lang.Double> throttlingRate_ = java.util.Collections.emptyList();
      private void ensureThrottlingRateIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          throttlingRate_ = new java.util.ArrayList<java.lang.Double>(throttlingRate_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated double throttlingRate = 2;</code>
       *
       * <pre>
       * Target rate for corresponding tenant.  
       * </pre>
       */
      public java.util.List<java.lang.Double>
          getThrottlingRateList() {
        return java.util.Collections.unmodifiableList(throttlingRate_);
      }
      /**
       * <code>repeated double throttlingRate = 2;</code>
       *
       * <pre>
       * Target rate for corresponding tenant.  
       * </pre>
       */
      public int getThrottlingRateCount() {
        return throttlingRate_.size();
      }
      /**
       * <code>repeated double throttlingRate = 2;</code>
       *
       * <pre>
       * Target rate for corresponding tenant.  
       * </pre>
       */
      public double getThrottlingRate(int index) {
        return throttlingRate_.get(index);
      }
      /**
       * <code>repeated double throttlingRate = 2;</code>
       *
       * <pre>
       * Target rate for corresponding tenant.  
       * </pre>
       */
      public Builder setThrottlingRate(
          int index, double value) {
        ensureThrottlingRateIsMutable();
        throttlingRate_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double throttlingRate = 2;</code>
       *
       * <pre>
       * Target rate for corresponding tenant.  
       * </pre>
       */
      public Builder addThrottlingRate(double value) {
        ensureThrottlingRateIsMutable();
        throttlingRate_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double throttlingRate = 2;</code>
       *
       * <pre>
       * Target rate for corresponding tenant.  
       * </pre>
       */
      public Builder addAllThrottlingRate(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureThrottlingRateIsMutable();
        super.addAll(values, throttlingRate_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double throttlingRate = 2;</code>
       *
       * <pre>
       * Target rate for corresponding tenant.  
       * </pre>
       */
      public Builder clearThrottlingRate() {
        throttlingRate_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional double defaultThrottlingRate = 3;
      private double defaultThrottlingRate_ ;
      /**
       * <code>optional double defaultThrottlingRate = 3;</code>
       *
       * <pre>
       * Default throttling rate for tenants not throttled
       * </pre>
       */
      public boolean hasDefaultThrottlingRate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double defaultThrottlingRate = 3;</code>
       *
       * <pre>
       * Default throttling rate for tenants not throttled
       * </pre>
       */
      public double getDefaultThrottlingRate() {
        return defaultThrottlingRate_;
      }
      /**
       * <code>optional double defaultThrottlingRate = 3;</code>
       *
       * <pre>
       * Default throttling rate for tenants not throttled
       * </pre>
       */
      public Builder setDefaultThrottlingRate(double value) {
        bitField0_ |= 0x00000004;
        defaultThrottlingRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double defaultThrottlingRate = 3;</code>
       *
       * <pre>
       * Default throttling rate for tenants not throttled
       * </pre>
       */
      public Builder clearDefaultThrottlingRate() {
        bitField0_ = (bitField0_ & ~0x00000004);
        defaultThrottlingRate_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:resourcethrottling.ThrottlingPointSpecification)
    }

    static {
      defaultInstance = new ThrottlingPointSpecification(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:resourcethrottling.ThrottlingPointSpecification)
  }

  public interface UniformThrottlingPointSpecificationOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string throttlingPointName = 1;
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point 
     * </pre>
     */
    boolean hasThrottlingPointName();
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point 
     * </pre>
     */
    java.lang.String getThrottlingPointName();
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point 
     * </pre>
     */
    com.google.protobuf.ByteString
        getThrottlingPointNameBytes();

    // required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by every instance
     * </pre>
     */
    boolean hasThrottlingPointSpecification();
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by every instance
     * </pre>
     */
    edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification getThrottlingPointSpecification();
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by every instance
     * </pre>
     */
    edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder getThrottlingPointSpecificationOrBuilder();
  }
  /**
   * Protobuf type {@code resourcethrottling.UniformThrottlingPointSpecification}
   *
   * <pre>
   * Update every instance of a throttling point with the same specification (ie, no skew among instances or self-balancing) 
   * </pre>
   */
  public static final class UniformThrottlingPointSpecification extends
      com.google.protobuf.GeneratedMessage
      implements UniformThrottlingPointSpecificationOrBuilder {
    // Use UniformThrottlingPointSpecification.newBuilder() to construct.
    private UniformThrottlingPointSpecification(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UniformThrottlingPointSpecification(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final UniformThrottlingPointSpecification defaultInstance;
    public static UniformThrottlingPointSpecification getDefaultInstance() {
      return defaultInstance;
    }

    public UniformThrottlingPointSpecification getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private UniformThrottlingPointSpecification(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              throttlingPointName_ = input.readBytes();
              break;
            }
            case 18: {
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = throttlingPointSpecification_.toBuilder();
              }
              throttlingPointSpecification_ = input.readMessage(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(throttlingPointSpecification_);
                throttlingPointSpecification_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_UniformThrottlingPointSpecification_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_UniformThrottlingPointSpecification_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.class, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder.class);
    }

    public static com.google.protobuf.Parser<UniformThrottlingPointSpecification> PARSER =
        new com.google.protobuf.AbstractParser<UniformThrottlingPointSpecification>() {
      public UniformThrottlingPointSpecification parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UniformThrottlingPointSpecification(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<UniformThrottlingPointSpecification> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string throttlingPointName = 1;
    public static final int THROTTLINGPOINTNAME_FIELD_NUMBER = 1;
    private java.lang.Object throttlingPointName_;
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point 
     * </pre>
     */
    public boolean hasThrottlingPointName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point 
     * </pre>
     */
    public java.lang.String getThrottlingPointName() {
      java.lang.Object ref = throttlingPointName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          throttlingPointName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getThrottlingPointNameBytes() {
      java.lang.Object ref = throttlingPointName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        throttlingPointName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;
    public static final int THROTTLINGPOINTSPECIFICATION_FIELD_NUMBER = 2;
    private edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification throttlingPointSpecification_;
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by every instance
     * </pre>
     */
    public boolean hasThrottlingPointSpecification() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by every instance
     * </pre>
     */
    public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification getThrottlingPointSpecification() {
      return throttlingPointSpecification_;
    }
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by every instance
     * </pre>
     */
    public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder getThrottlingPointSpecificationOrBuilder() {
      return throttlingPointSpecification_;
    }

    private void initFields() {
      throttlingPointName_ = "";
      throttlingPointSpecification_ = edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasThrottlingPointName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasThrottlingPointSpecification()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getThrottlingPointNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, throttlingPointSpecification_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getThrottlingPointNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, throttlingPointSpecification_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code resourcethrottling.UniformThrottlingPointSpecification}
     *
     * <pre>
     * Update every instance of a throttling point with the same specification (ie, no skew among instances or self-balancing) 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_UniformThrottlingPointSpecification_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_UniformThrottlingPointSpecification_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.class, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder.class);
      }

      // Construct using edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getThrottlingPointSpecificationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        throttlingPointName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (throttlingPointSpecificationBuilder_ == null) {
          throttlingPointSpecification_ = edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
        } else {
          throttlingPointSpecificationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_UniformThrottlingPointSpecification_descriptor;
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification getDefaultInstanceForType() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.getDefaultInstance();
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification build() {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification buildPartial() {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification result = new edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.throttlingPointName_ = throttlingPointName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (throttlingPointSpecificationBuilder_ == null) {
          result.throttlingPointSpecification_ = throttlingPointSpecification_;
        } else {
          result.throttlingPointSpecification_ = throttlingPointSpecificationBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification) {
          return mergeFrom((edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification other) {
        if (other == edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.getDefaultInstance()) return this;
        if (other.hasThrottlingPointName()) {
          bitField0_ |= 0x00000001;
          throttlingPointName_ = other.throttlingPointName_;
          onChanged();
        }
        if (other.hasThrottlingPointSpecification()) {
          mergeThrottlingPointSpecification(other.getThrottlingPointSpecification());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasThrottlingPointName()) {
          
          return false;
        }
        if (!hasThrottlingPointSpecification()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string throttlingPointName = 1;
      private java.lang.Object throttlingPointName_ = "";
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point 
       * </pre>
       */
      public boolean hasThrottlingPointName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point 
       * </pre>
       */
      public java.lang.String getThrottlingPointName() {
        java.lang.Object ref = throttlingPointName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          throttlingPointName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getThrottlingPointNameBytes() {
        java.lang.Object ref = throttlingPointName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          throttlingPointName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point 
       * </pre>
       */
      public Builder setThrottlingPointName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        throttlingPointName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point 
       * </pre>
       */
      public Builder clearThrottlingPointName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        throttlingPointName_ = getDefaultInstance().getThrottlingPointName();
        onChanged();
        return this;
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point 
       * </pre>
       */
      public Builder setThrottlingPointNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        throttlingPointName_ = value;
        onChanged();
        return this;
      }

      // required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;
      private edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification throttlingPointSpecification_ = edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder> throttlingPointSpecificationBuilder_;
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      public boolean hasThrottlingPointSpecification() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification getThrottlingPointSpecification() {
        if (throttlingPointSpecificationBuilder_ == null) {
          return throttlingPointSpecification_;
        } else {
          return throttlingPointSpecificationBuilder_.getMessage();
        }
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      public Builder setThrottlingPointSpecification(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification value) {
        if (throttlingPointSpecificationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          throttlingPointSpecification_ = value;
          onChanged();
        } else {
          throttlingPointSpecificationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      public Builder setThrottlingPointSpecification(
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder builderForValue) {
        if (throttlingPointSpecificationBuilder_ == null) {
          throttlingPointSpecification_ = builderForValue.build();
          onChanged();
        } else {
          throttlingPointSpecificationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      public Builder mergeThrottlingPointSpecification(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification value) {
        if (throttlingPointSpecificationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              throttlingPointSpecification_ != edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance()) {
            throttlingPointSpecification_ =
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.newBuilder(throttlingPointSpecification_).mergeFrom(value).buildPartial();
          } else {
            throttlingPointSpecification_ = value;
          }
          onChanged();
        } else {
          throttlingPointSpecificationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      public Builder clearThrottlingPointSpecification() {
        if (throttlingPointSpecificationBuilder_ == null) {
          throttlingPointSpecification_ = edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
          onChanged();
        } else {
          throttlingPointSpecificationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder getThrottlingPointSpecificationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getThrottlingPointSpecificationFieldBuilder().getBuilder();
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder getThrottlingPointSpecificationOrBuilder() {
        if (throttlingPointSpecificationBuilder_ != null) {
          return throttlingPointSpecificationBuilder_.getMessageOrBuilder();
        } else {
          return throttlingPointSpecification_;
        }
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 2;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by every instance
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder> 
          getThrottlingPointSpecificationFieldBuilder() {
        if (throttlingPointSpecificationBuilder_ == null) {
          throttlingPointSpecificationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder>(
                  throttlingPointSpecification_,
                  getParentForChildren(),
                  isClean());
          throttlingPointSpecification_ = null;
        }
        return throttlingPointSpecificationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:resourcethrottling.UniformThrottlingPointSpecification)
    }

    static {
      defaultInstance = new UniformThrottlingPointSpecification(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:resourcethrottling.UniformThrottlingPointSpecification)
  }

  public interface PerInstanceThrottlingPointSpecificationOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string throttlingPointName = 1;
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point
     * </pre>
     */
    boolean hasThrottlingPointName();
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point
     * </pre>
     */
    java.lang.String getThrottlingPointName();
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point
     * </pre>
     */
    com.google.protobuf.ByteString
        getThrottlingPointNameBytes();

    // required string host = 2;
    /**
     * <code>required string host = 2;</code>
     *
     * <pre>
     * the host of the throttling point
     * </pre>
     */
    boolean hasHost();
    /**
     * <code>required string host = 2;</code>
     *
     * <pre>
     * the host of the throttling point
     * </pre>
     */
    java.lang.String getHost();
    /**
     * <code>required string host = 2;</code>
     *
     * <pre>
     * the host of the throttling point
     * </pre>
     */
    com.google.protobuf.ByteString
        getHostBytes();

    // required uint32 procid = 3;
    /**
     * <code>required uint32 procid = 3;</code>
     *
     * <pre>
     * the procid of the throttling point
     * </pre>
     */
    boolean hasProcid();
    /**
     * <code>required uint32 procid = 3;</code>
     *
     * <pre>
     * the procid of the throttling point
     * </pre>
     */
    int getProcid();

    // required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by this instance
     * </pre>
     */
    boolean hasThrottlingPointSpecification();
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by this instance
     * </pre>
     */
    edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification getThrottlingPointSpecification();
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by this instance
     * </pre>
     */
    edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder getThrottlingPointSpecificationOrBuilder();
  }
  /**
   * Protobuf type {@code resourcethrottling.PerInstanceThrottlingPointSpecification}
   */
  public static final class PerInstanceThrottlingPointSpecification extends
      com.google.protobuf.GeneratedMessage
      implements PerInstanceThrottlingPointSpecificationOrBuilder {
    // Use PerInstanceThrottlingPointSpecification.newBuilder() to construct.
    private PerInstanceThrottlingPointSpecification(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PerInstanceThrottlingPointSpecification(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PerInstanceThrottlingPointSpecification defaultInstance;
    public static PerInstanceThrottlingPointSpecification getDefaultInstance() {
      return defaultInstance;
    }

    public PerInstanceThrottlingPointSpecification getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PerInstanceThrottlingPointSpecification(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              throttlingPointName_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              host_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              procid_ = input.readUInt32();
              break;
            }
            case 34: {
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = throttlingPointSpecification_.toBuilder();
              }
              throttlingPointSpecification_ = input.readMessage(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(throttlingPointSpecification_);
                throttlingPointSpecification_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.class, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder.class);
    }

    public static com.google.protobuf.Parser<PerInstanceThrottlingPointSpecification> PARSER =
        new com.google.protobuf.AbstractParser<PerInstanceThrottlingPointSpecification>() {
      public PerInstanceThrottlingPointSpecification parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PerInstanceThrottlingPointSpecification(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PerInstanceThrottlingPointSpecification> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string throttlingPointName = 1;
    public static final int THROTTLINGPOINTNAME_FIELD_NUMBER = 1;
    private java.lang.Object throttlingPointName_;
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point
     * </pre>
     */
    public boolean hasThrottlingPointName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point
     * </pre>
     */
    public java.lang.String getThrottlingPointName() {
      java.lang.Object ref = throttlingPointName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          throttlingPointName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string throttlingPointName = 1;</code>
     *
     * <pre>
     * The name of the throttling point
     * </pre>
     */
    public com.google.protobuf.ByteString
        getThrottlingPointNameBytes() {
      java.lang.Object ref = throttlingPointName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        throttlingPointName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string host = 2;
    public static final int HOST_FIELD_NUMBER = 2;
    private java.lang.Object host_;
    /**
     * <code>required string host = 2;</code>
     *
     * <pre>
     * the host of the throttling point
     * </pre>
     */
    public boolean hasHost() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string host = 2;</code>
     *
     * <pre>
     * the host of the throttling point
     * </pre>
     */
    public java.lang.String getHost() {
      java.lang.Object ref = host_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          host_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string host = 2;</code>
     *
     * <pre>
     * the host of the throttling point
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHostBytes() {
      java.lang.Object ref = host_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        host_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required uint32 procid = 3;
    public static final int PROCID_FIELD_NUMBER = 3;
    private int procid_;
    /**
     * <code>required uint32 procid = 3;</code>
     *
     * <pre>
     * the procid of the throttling point
     * </pre>
     */
    public boolean hasProcid() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 procid = 3;</code>
     *
     * <pre>
     * the procid of the throttling point
     * </pre>
     */
    public int getProcid() {
      return procid_;
    }

    // required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;
    public static final int THROTTLINGPOINTSPECIFICATION_FIELD_NUMBER = 4;
    private edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification throttlingPointSpecification_;
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by this instance
     * </pre>
     */
    public boolean hasThrottlingPointSpecification() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by this instance
     * </pre>
     */
    public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification getThrottlingPointSpecification() {
      return throttlingPointSpecification_;
    }
    /**
     * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
     *
     * <pre>
     * The specification for the throttling point that will be used by this instance
     * </pre>
     */
    public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder getThrottlingPointSpecificationOrBuilder() {
      return throttlingPointSpecification_;
    }

    private void initFields() {
      throttlingPointName_ = "";
      host_ = "";
      procid_ = 0;
      throttlingPointSpecification_ = edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasThrottlingPointName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHost()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasProcid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasThrottlingPointSpecification()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getThrottlingPointNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getHostBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, procid_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, throttlingPointSpecification_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getThrottlingPointNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getHostBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, procid_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, throttlingPointSpecification_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code resourcethrottling.PerInstanceThrottlingPointSpecification}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.class, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder.class);
      }

      // Construct using edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getThrottlingPointSpecificationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        throttlingPointName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        host_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        procid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (throttlingPointSpecificationBuilder_ == null) {
          throttlingPointSpecification_ = edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
        } else {
          throttlingPointSpecificationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_descriptor;
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification getDefaultInstanceForType() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.getDefaultInstance();
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification build() {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification buildPartial() {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification result = new edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.throttlingPointName_ = throttlingPointName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.host_ = host_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.procid_ = procid_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (throttlingPointSpecificationBuilder_ == null) {
          result.throttlingPointSpecification_ = throttlingPointSpecification_;
        } else {
          result.throttlingPointSpecification_ = throttlingPointSpecificationBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification) {
          return mergeFrom((edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification other) {
        if (other == edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.getDefaultInstance()) return this;
        if (other.hasThrottlingPointName()) {
          bitField0_ |= 0x00000001;
          throttlingPointName_ = other.throttlingPointName_;
          onChanged();
        }
        if (other.hasHost()) {
          bitField0_ |= 0x00000002;
          host_ = other.host_;
          onChanged();
        }
        if (other.hasProcid()) {
          setProcid(other.getProcid());
        }
        if (other.hasThrottlingPointSpecification()) {
          mergeThrottlingPointSpecification(other.getThrottlingPointSpecification());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasThrottlingPointName()) {
          
          return false;
        }
        if (!hasHost()) {
          
          return false;
        }
        if (!hasProcid()) {
          
          return false;
        }
        if (!hasThrottlingPointSpecification()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string throttlingPointName = 1;
      private java.lang.Object throttlingPointName_ = "";
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point
       * </pre>
       */
      public boolean hasThrottlingPointName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point
       * </pre>
       */
      public java.lang.String getThrottlingPointName() {
        java.lang.Object ref = throttlingPointName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          throttlingPointName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point
       * </pre>
       */
      public com.google.protobuf.ByteString
          getThrottlingPointNameBytes() {
        java.lang.Object ref = throttlingPointName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          throttlingPointName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point
       * </pre>
       */
      public Builder setThrottlingPointName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        throttlingPointName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point
       * </pre>
       */
      public Builder clearThrottlingPointName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        throttlingPointName_ = getDefaultInstance().getThrottlingPointName();
        onChanged();
        return this;
      }
      /**
       * <code>required string throttlingPointName = 1;</code>
       *
       * <pre>
       * The name of the throttling point
       * </pre>
       */
      public Builder setThrottlingPointNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        throttlingPointName_ = value;
        onChanged();
        return this;
      }

      // required string host = 2;
      private java.lang.Object host_ = "";
      /**
       * <code>required string host = 2;</code>
       *
       * <pre>
       * the host of the throttling point
       * </pre>
       */
      public boolean hasHost() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string host = 2;</code>
       *
       * <pre>
       * the host of the throttling point
       * </pre>
       */
      public java.lang.String getHost() {
        java.lang.Object ref = host_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          host_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string host = 2;</code>
       *
       * <pre>
       * the host of the throttling point
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHostBytes() {
        java.lang.Object ref = host_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          host_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string host = 2;</code>
       *
       * <pre>
       * the host of the throttling point
       * </pre>
       */
      public Builder setHost(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        host_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string host = 2;</code>
       *
       * <pre>
       * the host of the throttling point
       * </pre>
       */
      public Builder clearHost() {
        bitField0_ = (bitField0_ & ~0x00000002);
        host_ = getDefaultInstance().getHost();
        onChanged();
        return this;
      }
      /**
       * <code>required string host = 2;</code>
       *
       * <pre>
       * the host of the throttling point
       * </pre>
       */
      public Builder setHostBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        host_ = value;
        onChanged();
        return this;
      }

      // required uint32 procid = 3;
      private int procid_ ;
      /**
       * <code>required uint32 procid = 3;</code>
       *
       * <pre>
       * the procid of the throttling point
       * </pre>
       */
      public boolean hasProcid() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 procid = 3;</code>
       *
       * <pre>
       * the procid of the throttling point
       * </pre>
       */
      public int getProcid() {
        return procid_;
      }
      /**
       * <code>required uint32 procid = 3;</code>
       *
       * <pre>
       * the procid of the throttling point
       * </pre>
       */
      public Builder setProcid(int value) {
        bitField0_ |= 0x00000004;
        procid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 procid = 3;</code>
       *
       * <pre>
       * the procid of the throttling point
       * </pre>
       */
      public Builder clearProcid() {
        bitField0_ = (bitField0_ & ~0x00000004);
        procid_ = 0;
        onChanged();
        return this;
      }

      // required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;
      private edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification throttlingPointSpecification_ = edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder> throttlingPointSpecificationBuilder_;
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      public boolean hasThrottlingPointSpecification() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification getThrottlingPointSpecification() {
        if (throttlingPointSpecificationBuilder_ == null) {
          return throttlingPointSpecification_;
        } else {
          return throttlingPointSpecificationBuilder_.getMessage();
        }
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      public Builder setThrottlingPointSpecification(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification value) {
        if (throttlingPointSpecificationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          throttlingPointSpecification_ = value;
          onChanged();
        } else {
          throttlingPointSpecificationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      public Builder setThrottlingPointSpecification(
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder builderForValue) {
        if (throttlingPointSpecificationBuilder_ == null) {
          throttlingPointSpecification_ = builderForValue.build();
          onChanged();
        } else {
          throttlingPointSpecificationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      public Builder mergeThrottlingPointSpecification(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification value) {
        if (throttlingPointSpecificationBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              throttlingPointSpecification_ != edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance()) {
            throttlingPointSpecification_ =
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.newBuilder(throttlingPointSpecification_).mergeFrom(value).buildPartial();
          } else {
            throttlingPointSpecification_ = value;
          }
          onChanged();
        } else {
          throttlingPointSpecificationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      public Builder clearThrottlingPointSpecification() {
        if (throttlingPointSpecificationBuilder_ == null) {
          throttlingPointSpecification_ = edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.getDefaultInstance();
          onChanged();
        } else {
          throttlingPointSpecificationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder getThrottlingPointSpecificationBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getThrottlingPointSpecificationFieldBuilder().getBuilder();
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder getThrottlingPointSpecificationOrBuilder() {
        if (throttlingPointSpecificationBuilder_ != null) {
          return throttlingPointSpecificationBuilder_.getMessageOrBuilder();
        } else {
          return throttlingPointSpecification_;
        }
      }
      /**
       * <code>required .resourcethrottling.ThrottlingPointSpecification throttlingPointSpecification = 4;</code>
       *
       * <pre>
       * The specification for the throttling point that will be used by this instance
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder> 
          getThrottlingPointSpecificationFieldBuilder() {
        if (throttlingPointSpecificationBuilder_ == null) {
          throttlingPointSpecificationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingPointSpecificationOrBuilder>(
                  throttlingPointSpecification_,
                  getParentForChildren(),
                  isClean());
          throttlingPointSpecification_ = null;
        }
        return throttlingPointSpecificationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:resourcethrottling.PerInstanceThrottlingPointSpecification)
    }

    static {
      defaultInstance = new PerInstanceThrottlingPointSpecification(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:resourcethrottling.PerInstanceThrottlingPointSpecification)
  }

  public interface ThrottlingUpdateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification> 
        getUniformThrottlingPointSpecificationsList();
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification getUniformThrottlingPointSpecifications(int index);
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    int getUniformThrottlingPointSpecificationsCount();
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    java.util.List<? extends edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder> 
        getUniformThrottlingPointSpecificationsOrBuilderList();
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder getUniformThrottlingPointSpecificationsOrBuilder(
        int index);

    // optional bool clearAll = 2;
    /**
     * <code>optional bool clearAll = 2;</code>
     *
     * <pre>
     * to clear rates at all throttling points
     * </pre>
     */
    boolean hasClearAll();
    /**
     * <code>optional bool clearAll = 2;</code>
     *
     * <pre>
     * to clear rates at all throttling points
     * </pre>
     */
    boolean getClearAll();

    // repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification> 
        getPerInstanceThrottlingPointSpecificationsList();
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification getPerInstanceThrottlingPointSpecifications(int index);
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    int getPerInstanceThrottlingPointSpecificationsCount();
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    java.util.List<? extends edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder> 
        getPerInstanceThrottlingPointSpecificationsOrBuilderList();
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder getPerInstanceThrottlingPointSpecificationsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code resourcethrottling.ThrottlingUpdate}
   *
   * <pre>
   * Updates all throttling points in the system 
   * For future throttling points that are, for example, non-uniform, can add a repeated field here
   * </pre>
   */
  public static final class ThrottlingUpdate extends
      com.google.protobuf.GeneratedMessage
      implements ThrottlingUpdateOrBuilder {
    // Use ThrottlingUpdate.newBuilder() to construct.
    private ThrottlingUpdate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ThrottlingUpdate(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ThrottlingUpdate defaultInstance;
    public static ThrottlingUpdate getDefaultInstance() {
      return defaultInstance;
    }

    public ThrottlingUpdate getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ThrottlingUpdate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                uniformThrottlingPointSpecifications_ = new java.util.ArrayList<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification>();
                mutable_bitField0_ |= 0x00000001;
              }
              uniformThrottlingPointSpecifications_.add(input.readMessage(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              clearAll_ = input.readBool();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                perInstanceThrottlingPointSpecifications_ = new java.util.ArrayList<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification>();
                mutable_bitField0_ |= 0x00000004;
              }
              perInstanceThrottlingPointSpecifications_.add(input.readMessage(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          uniformThrottlingPointSpecifications_ = java.util.Collections.unmodifiableList(uniformThrottlingPointSpecifications_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          perInstanceThrottlingPointSpecifications_ = java.util.Collections.unmodifiableList(perInstanceThrottlingPointSpecifications_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingUpdate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate.class, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate.Builder.class);
    }

    public static com.google.protobuf.Parser<ThrottlingUpdate> PARSER =
        new com.google.protobuf.AbstractParser<ThrottlingUpdate>() {
      public ThrottlingUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ThrottlingUpdate(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ThrottlingUpdate> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;
    public static final int UNIFORMTHROTTLINGPOINTSPECIFICATIONS_FIELD_NUMBER = 1;
    private java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification> uniformThrottlingPointSpecifications_;
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    public java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification> getUniformThrottlingPointSpecificationsList() {
      return uniformThrottlingPointSpecifications_;
    }
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    public java.util.List<? extends edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder> 
        getUniformThrottlingPointSpecificationsOrBuilderList() {
      return uniformThrottlingPointSpecifications_;
    }
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    public int getUniformThrottlingPointSpecificationsCount() {
      return uniformThrottlingPointSpecifications_.size();
    }
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification getUniformThrottlingPointSpecifications(int index) {
      return uniformThrottlingPointSpecifications_.get(index);
    }
    /**
     * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
     */
    public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder getUniformThrottlingPointSpecificationsOrBuilder(
        int index) {
      return uniformThrottlingPointSpecifications_.get(index);
    }

    // optional bool clearAll = 2;
    public static final int CLEARALL_FIELD_NUMBER = 2;
    private boolean clearAll_;
    /**
     * <code>optional bool clearAll = 2;</code>
     *
     * <pre>
     * to clear rates at all throttling points
     * </pre>
     */
    public boolean hasClearAll() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool clearAll = 2;</code>
     *
     * <pre>
     * to clear rates at all throttling points
     * </pre>
     */
    public boolean getClearAll() {
      return clearAll_;
    }

    // repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;
    public static final int PERINSTANCETHROTTLINGPOINTSPECIFICATIONS_FIELD_NUMBER = 3;
    private java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification> perInstanceThrottlingPointSpecifications_;
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    public java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification> getPerInstanceThrottlingPointSpecificationsList() {
      return perInstanceThrottlingPointSpecifications_;
    }
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    public java.util.List<? extends edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder> 
        getPerInstanceThrottlingPointSpecificationsOrBuilderList() {
      return perInstanceThrottlingPointSpecifications_;
    }
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    public int getPerInstanceThrottlingPointSpecificationsCount() {
      return perInstanceThrottlingPointSpecifications_.size();
    }
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification getPerInstanceThrottlingPointSpecifications(int index) {
      return perInstanceThrottlingPointSpecifications_.get(index);
    }
    /**
     * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
     */
    public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder getPerInstanceThrottlingPointSpecificationsOrBuilder(
        int index) {
      return perInstanceThrottlingPointSpecifications_.get(index);
    }

    private void initFields() {
      uniformThrottlingPointSpecifications_ = java.util.Collections.emptyList();
      clearAll_ = false;
      perInstanceThrottlingPointSpecifications_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getUniformThrottlingPointSpecificationsCount(); i++) {
        if (!getUniformThrottlingPointSpecifications(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getPerInstanceThrottlingPointSpecificationsCount(); i++) {
        if (!getPerInstanceThrottlingPointSpecifications(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < uniformThrottlingPointSpecifications_.size(); i++) {
        output.writeMessage(1, uniformThrottlingPointSpecifications_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(2, clearAll_);
      }
      for (int i = 0; i < perInstanceThrottlingPointSpecifications_.size(); i++) {
        output.writeMessage(3, perInstanceThrottlingPointSpecifications_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < uniformThrottlingPointSpecifications_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, uniformThrottlingPointSpecifications_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, clearAll_);
      }
      for (int i = 0; i < perInstanceThrottlingPointSpecifications_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, perInstanceThrottlingPointSpecifications_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code resourcethrottling.ThrottlingUpdate}
     *
     * <pre>
     * Updates all throttling points in the system 
     * For future throttling points that are, for example, non-uniform, can add a repeated field here
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingUpdate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate.class, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate.Builder.class);
      }

      // Construct using edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUniformThrottlingPointSpecificationsFieldBuilder();
          getPerInstanceThrottlingPointSpecificationsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          uniformThrottlingPointSpecifications_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          uniformThrottlingPointSpecificationsBuilder_.clear();
        }
        clearAll_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          perInstanceThrottlingPointSpecifications_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.internal_static_resourcethrottling_ThrottlingUpdate_descriptor;
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate getDefaultInstanceForType() {
        return edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate.getDefaultInstance();
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate build() {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate buildPartial() {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate result = new edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            uniformThrottlingPointSpecifications_ = java.util.Collections.unmodifiableList(uniformThrottlingPointSpecifications_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.uniformThrottlingPointSpecifications_ = uniformThrottlingPointSpecifications_;
        } else {
          result.uniformThrottlingPointSpecifications_ = uniformThrottlingPointSpecificationsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.clearAll_ = clearAll_;
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            perInstanceThrottlingPointSpecifications_ = java.util.Collections.unmodifiableList(perInstanceThrottlingPointSpecifications_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.perInstanceThrottlingPointSpecifications_ = perInstanceThrottlingPointSpecifications_;
        } else {
          result.perInstanceThrottlingPointSpecifications_ = perInstanceThrottlingPointSpecificationsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate) {
          return mergeFrom((edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate other) {
        if (other == edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate.getDefaultInstance()) return this;
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          if (!other.uniformThrottlingPointSpecifications_.isEmpty()) {
            if (uniformThrottlingPointSpecifications_.isEmpty()) {
              uniformThrottlingPointSpecifications_ = other.uniformThrottlingPointSpecifications_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureUniformThrottlingPointSpecificationsIsMutable();
              uniformThrottlingPointSpecifications_.addAll(other.uniformThrottlingPointSpecifications_);
            }
            onChanged();
          }
        } else {
          if (!other.uniformThrottlingPointSpecifications_.isEmpty()) {
            if (uniformThrottlingPointSpecificationsBuilder_.isEmpty()) {
              uniformThrottlingPointSpecificationsBuilder_.dispose();
              uniformThrottlingPointSpecificationsBuilder_ = null;
              uniformThrottlingPointSpecifications_ = other.uniformThrottlingPointSpecifications_;
              bitField0_ = (bitField0_ & ~0x00000001);
              uniformThrottlingPointSpecificationsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUniformThrottlingPointSpecificationsFieldBuilder() : null;
            } else {
              uniformThrottlingPointSpecificationsBuilder_.addAllMessages(other.uniformThrottlingPointSpecifications_);
            }
          }
        }
        if (other.hasClearAll()) {
          setClearAll(other.getClearAll());
        }
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          if (!other.perInstanceThrottlingPointSpecifications_.isEmpty()) {
            if (perInstanceThrottlingPointSpecifications_.isEmpty()) {
              perInstanceThrottlingPointSpecifications_ = other.perInstanceThrottlingPointSpecifications_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePerInstanceThrottlingPointSpecificationsIsMutable();
              perInstanceThrottlingPointSpecifications_.addAll(other.perInstanceThrottlingPointSpecifications_);
            }
            onChanged();
          }
        } else {
          if (!other.perInstanceThrottlingPointSpecifications_.isEmpty()) {
            if (perInstanceThrottlingPointSpecificationsBuilder_.isEmpty()) {
              perInstanceThrottlingPointSpecificationsBuilder_.dispose();
              perInstanceThrottlingPointSpecificationsBuilder_ = null;
              perInstanceThrottlingPointSpecifications_ = other.perInstanceThrottlingPointSpecifications_;
              bitField0_ = (bitField0_ & ~0x00000004);
              perInstanceThrottlingPointSpecificationsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPerInstanceThrottlingPointSpecificationsFieldBuilder() : null;
            } else {
              perInstanceThrottlingPointSpecificationsBuilder_.addAllMessages(other.perInstanceThrottlingPointSpecifications_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getUniformThrottlingPointSpecificationsCount(); i++) {
          if (!getUniformThrottlingPointSpecifications(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getPerInstanceThrottlingPointSpecificationsCount(); i++) {
          if (!getPerInstanceThrottlingPointSpecifications(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.ThrottlingUpdate) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;
      private java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification> uniformThrottlingPointSpecifications_ =
        java.util.Collections.emptyList();
      private void ensureUniformThrottlingPointSpecificationsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          uniformThrottlingPointSpecifications_ = new java.util.ArrayList<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification>(uniformThrottlingPointSpecifications_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder> uniformThrottlingPointSpecificationsBuilder_;

      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification> getUniformThrottlingPointSpecificationsList() {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(uniformThrottlingPointSpecifications_);
        } else {
          return uniformThrottlingPointSpecificationsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public int getUniformThrottlingPointSpecificationsCount() {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          return uniformThrottlingPointSpecifications_.size();
        } else {
          return uniformThrottlingPointSpecificationsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification getUniformThrottlingPointSpecifications(int index) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          return uniformThrottlingPointSpecifications_.get(index);
        } else {
          return uniformThrottlingPointSpecificationsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder setUniformThrottlingPointSpecifications(
          int index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification value) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUniformThrottlingPointSpecificationsIsMutable();
          uniformThrottlingPointSpecifications_.set(index, value);
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder setUniformThrottlingPointSpecifications(
          int index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder builderForValue) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          ensureUniformThrottlingPointSpecificationsIsMutable();
          uniformThrottlingPointSpecifications_.set(index, builderForValue.build());
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder addUniformThrottlingPointSpecifications(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification value) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUniformThrottlingPointSpecificationsIsMutable();
          uniformThrottlingPointSpecifications_.add(value);
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder addUniformThrottlingPointSpecifications(
          int index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification value) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUniformThrottlingPointSpecificationsIsMutable();
          uniformThrottlingPointSpecifications_.add(index, value);
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder addUniformThrottlingPointSpecifications(
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder builderForValue) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          ensureUniformThrottlingPointSpecificationsIsMutable();
          uniformThrottlingPointSpecifications_.add(builderForValue.build());
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder addUniformThrottlingPointSpecifications(
          int index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder builderForValue) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          ensureUniformThrottlingPointSpecificationsIsMutable();
          uniformThrottlingPointSpecifications_.add(index, builderForValue.build());
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder addAllUniformThrottlingPointSpecifications(
          java.lang.Iterable<? extends edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification> values) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          ensureUniformThrottlingPointSpecificationsIsMutable();
          super.addAll(values, uniformThrottlingPointSpecifications_);
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder clearUniformThrottlingPointSpecifications() {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          uniformThrottlingPointSpecifications_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public Builder removeUniformThrottlingPointSpecifications(int index) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          ensureUniformThrottlingPointSpecificationsIsMutable();
          uniformThrottlingPointSpecifications_.remove(index);
          onChanged();
        } else {
          uniformThrottlingPointSpecificationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder getUniformThrottlingPointSpecificationsBuilder(
          int index) {
        return getUniformThrottlingPointSpecificationsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder getUniformThrottlingPointSpecificationsOrBuilder(
          int index) {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          return uniformThrottlingPointSpecifications_.get(index);  } else {
          return uniformThrottlingPointSpecificationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public java.util.List<? extends edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder> 
           getUniformThrottlingPointSpecificationsOrBuilderList() {
        if (uniformThrottlingPointSpecificationsBuilder_ != null) {
          return uniformThrottlingPointSpecificationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(uniformThrottlingPointSpecifications_);
        }
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder addUniformThrottlingPointSpecificationsBuilder() {
        return getUniformThrottlingPointSpecificationsFieldBuilder().addBuilder(
            edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.getDefaultInstance());
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder addUniformThrottlingPointSpecificationsBuilder(
          int index) {
        return getUniformThrottlingPointSpecificationsFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.getDefaultInstance());
      }
      /**
       * <code>repeated .resourcethrottling.UniformThrottlingPointSpecification uniformThrottlingPointSpecifications = 1;</code>
       */
      public java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder> 
           getUniformThrottlingPointSpecificationsBuilderList() {
        return getUniformThrottlingPointSpecificationsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder> 
          getUniformThrottlingPointSpecificationsFieldBuilder() {
        if (uniformThrottlingPointSpecificationsBuilder_ == null) {
          uniformThrottlingPointSpecificationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.UniformThrottlingPointSpecificationOrBuilder>(
                  uniformThrottlingPointSpecifications_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          uniformThrottlingPointSpecifications_ = null;
        }
        return uniformThrottlingPointSpecificationsBuilder_;
      }

      // optional bool clearAll = 2;
      private boolean clearAll_ ;
      /**
       * <code>optional bool clearAll = 2;</code>
       *
       * <pre>
       * to clear rates at all throttling points
       * </pre>
       */
      public boolean hasClearAll() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool clearAll = 2;</code>
       *
       * <pre>
       * to clear rates at all throttling points
       * </pre>
       */
      public boolean getClearAll() {
        return clearAll_;
      }
      /**
       * <code>optional bool clearAll = 2;</code>
       *
       * <pre>
       * to clear rates at all throttling points
       * </pre>
       */
      public Builder setClearAll(boolean value) {
        bitField0_ |= 0x00000002;
        clearAll_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool clearAll = 2;</code>
       *
       * <pre>
       * to clear rates at all throttling points
       * </pre>
       */
      public Builder clearClearAll() {
        bitField0_ = (bitField0_ & ~0x00000002);
        clearAll_ = false;
        onChanged();
        return this;
      }

      // repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;
      private java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification> perInstanceThrottlingPointSpecifications_ =
        java.util.Collections.emptyList();
      private void ensurePerInstanceThrottlingPointSpecificationsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          perInstanceThrottlingPointSpecifications_ = new java.util.ArrayList<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification>(perInstanceThrottlingPointSpecifications_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder> perInstanceThrottlingPointSpecificationsBuilder_;

      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification> getPerInstanceThrottlingPointSpecificationsList() {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(perInstanceThrottlingPointSpecifications_);
        } else {
          return perInstanceThrottlingPointSpecificationsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public int getPerInstanceThrottlingPointSpecificationsCount() {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          return perInstanceThrottlingPointSpecifications_.size();
        } else {
          return perInstanceThrottlingPointSpecificationsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification getPerInstanceThrottlingPointSpecifications(int index) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          return perInstanceThrottlingPointSpecifications_.get(index);
        } else {
          return perInstanceThrottlingPointSpecificationsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder setPerInstanceThrottlingPointSpecifications(
          int index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification value) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePerInstanceThrottlingPointSpecificationsIsMutable();
          perInstanceThrottlingPointSpecifications_.set(index, value);
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder setPerInstanceThrottlingPointSpecifications(
          int index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder builderForValue) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          ensurePerInstanceThrottlingPointSpecificationsIsMutable();
          perInstanceThrottlingPointSpecifications_.set(index, builderForValue.build());
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder addPerInstanceThrottlingPointSpecifications(edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification value) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePerInstanceThrottlingPointSpecificationsIsMutable();
          perInstanceThrottlingPointSpecifications_.add(value);
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder addPerInstanceThrottlingPointSpecifications(
          int index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification value) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePerInstanceThrottlingPointSpecificationsIsMutable();
          perInstanceThrottlingPointSpecifications_.add(index, value);
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder addPerInstanceThrottlingPointSpecifications(
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder builderForValue) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          ensurePerInstanceThrottlingPointSpecificationsIsMutable();
          perInstanceThrottlingPointSpecifications_.add(builderForValue.build());
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder addPerInstanceThrottlingPointSpecifications(
          int index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder builderForValue) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          ensurePerInstanceThrottlingPointSpecificationsIsMutable();
          perInstanceThrottlingPointSpecifications_.add(index, builderForValue.build());
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder addAllPerInstanceThrottlingPointSpecifications(
          java.lang.Iterable<? extends edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification> values) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          ensurePerInstanceThrottlingPointSpecificationsIsMutable();
          super.addAll(values, perInstanceThrottlingPointSpecifications_);
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder clearPerInstanceThrottlingPointSpecifications() {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          perInstanceThrottlingPointSpecifications_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public Builder removePerInstanceThrottlingPointSpecifications(int index) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          ensurePerInstanceThrottlingPointSpecificationsIsMutable();
          perInstanceThrottlingPointSpecifications_.remove(index);
          onChanged();
        } else {
          perInstanceThrottlingPointSpecificationsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder getPerInstanceThrottlingPointSpecificationsBuilder(
          int index) {
        return getPerInstanceThrottlingPointSpecificationsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder getPerInstanceThrottlingPointSpecificationsOrBuilder(
          int index) {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          return perInstanceThrottlingPointSpecifications_.get(index);  } else {
          return perInstanceThrottlingPointSpecificationsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public java.util.List<? extends edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder> 
           getPerInstanceThrottlingPointSpecificationsOrBuilderList() {
        if (perInstanceThrottlingPointSpecificationsBuilder_ != null) {
          return perInstanceThrottlingPointSpecificationsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(perInstanceThrottlingPointSpecifications_);
        }
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder addPerInstanceThrottlingPointSpecificationsBuilder() {
        return getPerInstanceThrottlingPointSpecificationsFieldBuilder().addBuilder(
            edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.getDefaultInstance());
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder addPerInstanceThrottlingPointSpecificationsBuilder(
          int index) {
        return getPerInstanceThrottlingPointSpecificationsFieldBuilder().addBuilder(
            index, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.getDefaultInstance());
      }
      /**
       * <code>repeated .resourcethrottling.PerInstanceThrottlingPointSpecification perInstanceThrottlingPointSpecifications = 3;</code>
       */
      public java.util.List<edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder> 
           getPerInstanceThrottlingPointSpecificationsBuilderList() {
        return getPerInstanceThrottlingPointSpecificationsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder> 
          getPerInstanceThrottlingPointSpecificationsFieldBuilder() {
        if (perInstanceThrottlingPointSpecificationsBuilder_ == null) {
          perInstanceThrottlingPointSpecificationsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecification.Builder, edu.brown.cs.systems.resourcethrottling.ThrottlingMessages.PerInstanceThrottlingPointSpecificationOrBuilder>(
                  perInstanceThrottlingPointSpecifications_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          perInstanceThrottlingPointSpecifications_ = null;
        }
        return perInstanceThrottlingPointSpecificationsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:resourcethrottling.ThrottlingUpdate)
    }

    static {
      defaultInstance = new ThrottlingUpdate(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:resourcethrottling.ThrottlingUpdate)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_resourcethrottling_ThrottlingPointSpecification_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_resourcethrottling_ThrottlingPointSpecification_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_resourcethrottling_UniformThrottlingPointSpecification_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_resourcethrottling_UniformThrottlingPointSpecification_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_resourcethrottling_ThrottlingUpdate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_resourcethrottling_ThrottlingUpdate_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*src/main/protobuf/ThrottlingMessages.p" +
      "roto\022\022resourcethrottling\"g\n\034ThrottlingPo" +
      "intSpecification\022\020\n\010tenantID\030\001 \003(\r\022\026\n\016th" +
      "rottlingRate\030\002 \003(\001\022\035\n\025defaultThrottlingR" +
      "ate\030\003 \001(\001\"\232\001\n#UniformThrottlingPointSpec" +
      "ification\022\033\n\023throttlingPointName\030\001 \002(\t\022V" +
      "\n\034throttlingPointSpecification\030\002 \002(\01320.r" +
      "esourcethrottling.ThrottlingPointSpecifi" +
      "cation\"\274\001\n\'PerInstanceThrottlingPointSpe" +
      "cification\022\033\n\023throttlingPointName\030\001 \002(\t\022",
      "\014\n\004host\030\002 \002(\t\022\016\n\006procid\030\003 \002(\r\022V\n\034throttl" +
      "ingPointSpecification\030\004 \002(\01320.resourceth" +
      "rottling.ThrottlingPointSpecification\"\372\001" +
      "\n\020ThrottlingUpdate\022e\n$uniformThrottlingP" +
      "ointSpecifications\030\001 \003(\01327.resourcethrot" +
      "tling.UniformThrottlingPointSpecificatio" +
      "n\022\020\n\010clearAll\030\002 \001(\010\022m\n(perInstanceThrott" +
      "lingPointSpecifications\030\003 \003(\0132;.resource" +
      "throttling.PerInstanceThrottlingPointSpe" +
      "cificationB=\n\'edu.brown.cs.systems.resou",
      "rcethrottlingB\022ThrottlingMessages"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_resourcethrottling_ThrottlingPointSpecification_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_resourcethrottling_ThrottlingPointSpecification_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_resourcethrottling_ThrottlingPointSpecification_descriptor,
              new java.lang.String[] { "TenantID", "ThrottlingRate", "DefaultThrottlingRate", });
          internal_static_resourcethrottling_UniformThrottlingPointSpecification_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_resourcethrottling_UniformThrottlingPointSpecification_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_resourcethrottling_UniformThrottlingPointSpecification_descriptor,
              new java.lang.String[] { "ThrottlingPointName", "ThrottlingPointSpecification", });
          internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_resourcethrottling_PerInstanceThrottlingPointSpecification_descriptor,
              new java.lang.String[] { "ThrottlingPointName", "Host", "Procid", "ThrottlingPointSpecification", });
          internal_static_resourcethrottling_ThrottlingUpdate_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_resourcethrottling_ThrottlingUpdate_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_resourcethrottling_ThrottlingUpdate_descriptor,
              new java.lang.String[] { "UniformThrottlingPointSpecifications", "ClearAll", "PerInstanceThrottlingPointSpecifications", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
